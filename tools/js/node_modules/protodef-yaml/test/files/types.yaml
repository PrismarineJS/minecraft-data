BehaviourPackInfos: []li16
   uuid: string
   version: string
   size: lu64
   content_key: string
   sub_pack_name: string
   content_identity: string
   has_scripts: bool

TexturePackInfos: []li16
   uuid: string
   version: string
   size: lu64
   content_key: string
   sub_pack_name: string
   content_identity: string
   has_scripts: bool
   rtx_enabled: bool

ResourcePackIdVersions: []varint
   uuid: string
   version: string
   name: string

ResourcePackIds: string[]varint

Experiment:
   name: string
   enabled: bool

Experiments: Experiment[]varint

GameRule:
   name: string
   type: varint =>
      1: bool
      2: int
      3: float
   value: type?
      if bool: bool
      if int: varint
      if float: lf32

GameRules: GameRule[]varint

Chunks:
   cache_enabled: bool
   _: cache_enabled?
      if true: void # TODO
      if false: void

BlockPalette: []varint
   name: string
   state: nbt

ItemStates: []varint
   name: string
   runtime_id: li16
   component_based: bool

Item:
   network_id: zigzag32
   _: network_id?
      if 0: void
      default:
         auxiliary_value: zigzag32
         has_nbt: lu16 =>
            0xffff: '1'
            0x0000: '0'
         _: has_nbt?
            if true:
               nbt_version: u8
               nbt: nbt
            default: void
         can_place_on: string[]zigzag32
         can_destroy: string[]zigzag32
   _: network_id?
      if 355:
         blocking_tick: zigzag64

vec3i:
   x: zigzag32
   y: zigzag32
   z: zigzag32

vec3u:
   x: varint
   y: varint
   z: varint

vec3f:
   x: lf32
   y: lf32
   z: lf32

vec2f:
   x: lf32
   z: lf32

MetadataDictionary: []varint
   key: varint
   type: varint =>
      0: BYTE
      1: SHORT
      2: INT
      3: FLOAT
      4: STRING
      5: COMPOUND_TAG
      6: POS
      7: LONG
      8: VECTOR3F
   value: type?
      if BYTE: i8
      if SHORT: li16
      if INT: zigzag32
      if FLOAT: lf32
      if STRING: string
      if COMPOUND_TAG: nbt
      if POS: vec3i
      if LONG: zigzag64
      if VECTOR3F: li32

Links: []varint
   ridden_entity_id: zigzag64
   rider_entity_id: zigzag64
   type: u8
   immediate: bool
   rider_initiated: bool

EntityAttributes: []varint
   name: string
   min: lf32
   value: lf32
   max: lf32

Rotation:
   yaw: byterot
   pitch: byterot
   head_yaw: byterot

BlockCoordinates: # mojang...
   x: zigzag32
   y: varint
   z: zigzag32

PlayerAttributes: []varint
   min: lf32
   max: lf32
   current: lf32
   default: lf32
   name: string

ItemStacks: []varint
   runtime_id: zigzag32
   item: Item

RecipeIngredient:
   network_id: zigzag32
   _: network_id?
      if 0: void
      default:
         network_data: zigzag32
         count: zigzag32

PotionTypeRecipes: []varint
   input_item_id: zigzag32
   input_item_meta: zigzag32
   ingredient_id: zigzag32
   ingredient_meta: zigzag32
   output_item_id: zigzag32
   output_item_meta: zigzag32

PotionContainerChangeRecipes: []varint
   input_item_id: zigzag32
   ingredient_id: zigzag32
   output_item_id: zigzag32

Recipes: []varint
   type: varint =>
      '0': 'shapeless' #'ENTRY_SHAPELESS',
      '1': 'shaped' #'ENTRY_SHAPED',
      '2': 'furnace' # 'ENTRY_FURNACE',
      # `furnace_with_metadata` is a recipe specifically used for furnace-type crafting stations. It is equal to
      # `furnace`, except it has an input item with a specific metadata value, instead of any metadata value.
      '3': 'furnace_with_metadata' # 'ENTRY_FURNACE_DATA', // has metadata
      '4': 'multi' #'ENTRY_MULTI', //TODO
      '5': 'shapeless' #'ENTRY_SHULKER_BOX', //TODO
      '6': 'shapeless' #'ENTRY_SHAPELESS_CHEMISTRY', //TODO
      '7': 'shaped' #'ENTRY_SHAPED_CHEMISTRY', //TODO
   recipe: type?
      if shapeless:
         recipe_id: string
         input: RecipeIngredient[]varint
         output: Item[]varint
         uuid: uuid
         block: string
         priority: zigzag32
         network_id: zigzag32
      if shaped:
         recipe_id: string
         width: zigzag32
         height: zigzag32
         # todo: can this become
         # RecipeIngredient[$height][$width] or RecipeIngredient[]$height[]$width ?
         input: []$width
            _: RecipeIngredient[]$height
         output: Item[]varint
         uuid: uuid
         block: string
         priority: zigzag32
         network_id: zigzag32
      if furnace:
         input_id: zigzag32
         output: Item
         block: string
      if furnace_with_metadata:
         input_id: zigzag32
         input_meta: zigzag32
         output: Item
         block: string
      if multi:
         uuid: uuid
         network_id: zigzag32

SkinImage:
   width: li32
   height: li32
   data: string

Skin:
   skin_id: string
   skin_resource_pack: string
   skin_data: SkinImage
   animations: []li32
      skin_image: SkinImage
      animation_type: li32
      animation_frames: lf32
      expression_type: lf32
   cape_data: SkinImage
   geometry_data: string
   animation_data: string
   premium: string
   persona: bool
   cape_on_classic: bool
   cape_id: string
   full_skin_id: string
   arm_size: string
   skin_color: string
   personal_pieces: []li32
      piece_id: string
      piece_type: string
      pack_id: string
      product_id: string
   piece_tint_colors: []li32
      piece_type: string
      colors: string[]li32

PlayerRecords:
   type: u8 =>
      0: add
      1: remove
   records_count: varint
   records: []$records_count
      _: type?
         if add:
            uuid: uuid
            entity_unique_id: zigzag64
            username: string
            xbox_user_id: string
            platform_chat_id: string
            build_platform: li32
            skin_data: Skin
            is_teacher: bool
            is_host: bool
         if remove:
            uuid: uuid
   uuid: type?
      if add: uuid
      default: void
   verified: bool[]$records_count

ScoreEntries:
   type: u8 =>
      0: change
      1: remove
   entries: []varint
      scoreboard_id: zigzag64
      objective_name: string
      score: li32
      _: type?
         if remove:
            entry_type: i8 =>
               1: player
               2: entity
               3: fake_player
            _: entry_type?
               if player or entity:
                  entity_unique_id: zigzag64
               if fake_player:
                  custom_name: string

ScoreboardIdentityEntries:
   type: i8 =>
      0: TYPE_REGISTER_IDENTITY
      1: TYPE_CLEAR_IDENTITY
   entries: []varint
      scoreboard_id: zigzag64
      entity_unique_id: type ?
         if TYPE_REGISTER_IDENTITY: zigzag64
         default: void

Enchant:
   id: u8
   level: u8

EnchantOptions: []varint
   cost: varint
   slot_flags: li32
   equip_enchants: Enchant[]varint
   held_enchants: Enchant[]varint
   self_enchants: Enchant[]varint
   name: string
   option_id: zigzag64


StackRequestSlotInfo:
   container_id: u8
   slot_id: u8
   stack_id: zigzag32

#

ItemStackRequests: []varint
   request_id: zigzag32
   actions: []varint
      type_id: u8 =>
         '0': 'TAKE' 
         '1': 'PLACE' 
         '2': 'SWAP' 
         '3': 'DROP' 
         '4': 'DESTROY' 
         '5': 'CRAFTING_CONSUME_INPUT' 
         '6': 'create' 
         '7': 'LAB_TABLE_COMBINE' 
         '8': 'BEACON_PAYMENT' 
         '9': 'CRAFTING_RECIPE' 
         '10': 'CRAFTING_RECIPE_AUTO'  #recipe book?
         '11': 'CREATIVE_CREATE' 
         '12': 'CRAFTING_NON_IMPLEMENTED_DEPRECATED'  #anvils aren't fully implemented yet
         '13': 'CRAFTING_RESULTS_DEPRECATED'  #no idea what this is for
      _: type_id ?
         if TAKE or PLACE:
            count: u8
            source: StackRequestSlotInfo
            destination: StackRequestSlotInfo
         if SWAP:
            source: StackRequestSlotInfo
            destination: StackRequestSlotInfo
         if DROP:
            count: u8
            source: StackRequestSlotInfo
            randomly: bool
         if DESTROY or CRAFTING_CONSUME_INPUT:
            count: u8
            source: StackRequestSlotInfo
         if create:
            result_slot_id: u8
         if BEACON_PAYMENT:
            primary_effect: varint
            secondary_effect: varint
         if CRAFTING_RECIPE or CRAFTING_RECIPE_AUTO:
            recipe_network_id: varint32
         if CREATIVE_CREATE:
            creative_item_network_id: varint32
         if CRAFTING_NON_IMPLEMENTED_DEPRECATED: void
         if CRAFTING_RESULTS_DEPRECATED:
            result_items: ItemStacks
            times_crafted: u8


ItemStackResponses: []varint
   result: u8
   request_id: varint32
   containers: []varint
      container_id: u8
      slots: []varint
         slot: u8
         hotbar_slot: u8
         count: u8
         item_stack_id: varint32
         custom_name: string

ItemComponentList: []varint
   name: string
   nbt: nbt

Severity: =>
   0: low
   1: high
   2: highest
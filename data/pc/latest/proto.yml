!version: 1.21.4
!StartDocs: true

^types:
   varint: native
   varlong: native
   optvarint: varint
   pstring: native
   buffer: native
   u8: native
   u16: native
   u32: native
   u64: native
   i8: native
   i16: native
   i32: native
   i64: native
   bool: native
   f32: native
   f64: native
   UUID: native
   option: native
   entityMetadataLoop: native
   topBitSetTerminatedArray: native
   bitfield: native
   bitflags: native
   container: native
   switch: native
   void: native
   array: native
   restBuffer: native
   anonymousNbt: native
   anonOptionalNbt: native
   registryEntryHolder: native
   registryEntryHolderSet: native
   ByteArray: ["buffer", { "countType": "varint" }]
   string: [
      "pstring",
      {
         "countType": "varint"
      }
   ]
   vec2f:
      x: f32
      y: f32
   vec3f:
      x: f32
      y: f32
      z: f32
   vec4f:
      x: f32
      y: f32
      z: f32
      w: f32
   vec3f64:
      x: f64
      y: f64
      z: f64
   IDSet: ["registryEntryHolderSet", {
      "base": { name: "name", type: "string" },
      "otherwise": { name: "ids", type: "varint" }
   }]
   ContainerID: varint
   SoundEvent:
      soundName: string
      fixedRange?: f32
   RecipeDisplay:
      type: varint =>
      - crafting_shapeless
      - crafting_shaped
      - furnace
      - stonecutter
      - smithing
      data: type ?
         if crafting_shapeless:
            ingredients: SlotDisplay[]varint
            result: SlotDisplay
            craftingStation: SlotDisplay
         if crafting_shaped:
            width: varint
            height: varint
            ingredients: SlotDisplay[]varint
            result: SlotDisplay
            craftingStation: SlotDisplay
         if furnace:
            ingredient: SlotDisplay
            fuel: SlotDisplay
            result: SlotDisplay
            craftingStation: SlotDisplay
            duration: varint
            experience: f32
         if stonecutter:
            ingredient: SlotDisplay
            result: SlotDisplay
            craftingStation: SlotDisplay
         if smithing:
            template: SlotDisplay
            base: SlotDisplay
            addition: SlotDisplay
            result: SlotDisplay
            craftingStation: SlotDisplay
   SlotDisplay:
      type: varint =>
      - empty
      - any_fuel
      - item
      - item_stack
      - tag
      - smithing_trim
      - with_remainder
      - composite
      data: type ?
         if empty or any_fuel: void
         if item: varint
         if item_stack: Slot
         if tag: string
         if simthing_trim:
            base: SlotDisplay
            material: SlotDisplay
            pattern: SlotDisplay
         if with_remainder:
            input: SlotDisplay
            remainder: SlotDisplay
         if composite: SlotDisplay[]varint
   SlotComponentType: varint =>
   - custom_data
   - max_stack_size
   - max_damage
   - damage
   - unbreakable
   - custom_name
   - item_name
   - item_model
   - lore
   - rarity
   - enchantments
   - can_place_on
   - can_break
   - attribute_modifiers
   - custom_model_data
   - hide_additional_tooltip
   - hide_tooltip
   - repair_cost
   - creative_slot_lock
   - enchantment_glint_override
   - intangible_projectile
   - food
   - consumable
   - use_remainder
   - use_cooldown
   - damage_resistant
   - tool
   - enchantable
   - equippable
   - repairable
   - glider
   - tooltip_style
   - death_protection
   - stored_enchantments
   - dyed_color
   - map_color
   - map_id
   - map_decorations
   - map_post_processing
   - charged_projectiles
   - bundle_contents
   - potion_contents
   - suspicious_stew_effects
   - writable_book_content
   - written_book_content
   - trim
   - debug_stick_state
   - entity_data
   - bucket_entity_data
   - block_entity_data
   - instrument
   - ominous_bottle_amplifier
   - jukebox_playable
   - recipes
   - lodestone_tracker
   - firework_explosion
   - fireworks
   - profile
   - note_block_sound
   - banner_patterns
   - base_color
   - pot_decorations
   - container
   - block_state
   - bees
   - lock
   - container_loot

   SlotComponent:
      type: SlotComponentType
      ## Ref: client/net/minecraft/core/component/DataComponents.java
      data: type ?
         ## TODO: look into how nbt works here
         if custom_data: anonymousNbt
         if max_stack_size: varint
         if max_damage: varint
         if damage: varint
         if unbreakable: bool
         if custom_name: anonymousNbt
         if item_name: anonymousNbt
         if item_model: string
         if lore: anonOptionalNbt[]varint
         if rarity: varint =>
         - common
         - uncommon
         - rare
         - epic
         if enchantments:
            enchantments: []varint
               id: varint
               level: varint
            showTooltip: bool
         if can_place_on or can_break:
            predicates: BlockPredicate[]varint
            showTooltip: bool
         if attribute_modifiers:
            attributes: []varint
               typeId: varint
               name: string
               value: f64
               operation: varint =>
               - add
               - multiply_base
               - multiply_total
               slot: varint =>
               - any
               - main_hand
               - off_hand
               - hand
               - feet
               - legs
               - chest
               - head
               - armor
               - body
            showTooltip: bool
         if custom_model_data: varint
         if hide_additional_tooltip: void
         if hide_tooltip: void
         if repair_cost: varint
         if creative_slot_lock: void
         if enchantment_glint_override: bool
         if intangible_projectile: void
         if food: 
            nutrition: varint
            # How much saturation will be given after consuming the item.
            saturationModifier: f32
            # Whether the item can always be eaten, even at full hunger.
            canAlwaysEat: bool
         if consumable:
            consume_seconds: f32
            animation: varint =>
            - none
            - eat
            - drink
            - block
            - bow
            - spear
            - crossbow
            - spyglass
            - toot_horn
            - brush
            sound: ["registryEntryHolder", {
               "baseName": "soundId",
               "otherwise": { name: "data", type: "SoundEvent" }
            }]
            makes_particles: bool
            effects: ConsumeEffect[]varint
         if use_remainder: Slot
         if use_cooldown:
            seconds: f32
            cooldownGroup?: string
         if damage_resistant: string
         if tool:
            rules: []varint
               blocks: IDSet
               # The speed at which the tool breaks this rules' blocks.
               speed?: f32
               # Whether items should drop only if this is the correct tool.
               correctDropForBlocks?: bool
            # The mining speed in case none of the previous rule were matched.
            defaultMiningSpeed: f32
            damagePerBlock: varint
         # Enchantment cost up to which the item can be enchanted
         if enchantable: varint
         if equippable:
            slot: varint =>
            - main_hand
            - off_hand
            - feet
            - legs
            - chest
            - head
            - body
            sound: ["registryEntryHolder", {
               "baseName": "soundId",
               "otherwise": { name: "data", type: "SoundEvent" }
            }]
            model?: string
            cameraOverlay?: string
            allowedEntities?: IDSet
            dispensable: bool
            swappable: bool
            damageable: bool
         if repairable:
            items: IDSet
         if tooltip_style: string
         if death_protection:
            effects: ConsumeEffect[]varint
         if stored_enchantments:
            enchantments: []varint
               # The ID of the enchantment in the enchantment registry.
               id: varint
               level: varint
            # Whether the list of enchantments should be shown on the item's tooltip.
            showInTooltip: bool
         if dyed_color:
            color: varint
            showTooltip: bool
         if map_color: varint
         if map_id: varint
         if map_decorations: anonOptionalNbt
         if map_post_processing: varint
         if charged_projectiles:
            projectiles: Slot[]varint
         if bundle_contents:
            contents: Slot[]varint
         if potion_contents:
            # True if this potion has an ID in the potion registry--it has the default effects associated with the potion type.
            potionId?: varint
            # The RGB components of the color, encoded as an integer.
            customColor?: varint
            customEffects: PotionEffect[]varint
            customName: string
         # Name	Type	Description
         # Number Of Effects	VarInt	Number of elements in the following array.
         # Effect	Type ID	Array	VarInt Enum	The ID of the effect in the potion effect type registry.
         # Duration	VarInt	The duration of the effect.
         if suspicious_stew_effects:
            effects: []varint
               effect: varint
               duration: varint
         # Name	Type	Description
         # Number Of Pages	VarInt	Number of elements in the following array.
         # Page	Raw Content	Array (100)	String (1024)	The raw text of the page.
         # Has Filtered Content	Boolean	
         # Filtered Content	Optional String (1024)	The content after passing through chat filters. Only present if Has Filtered Content is true.
         if writable_book_content:
            pages: BookPage[]varint
         # Name	Type	Description
         # Raw Title	String (32)	The raw title of the book.
         # Has Filtered Title	Boolean	
         # Filtered Title	Optional String (32)	The title after going through chat filters. Only present if Has Filtered Title is true.
         # Author	String	
         # Generation	VarInt	
         # Number Of Pages	VarInt	Number of elements in the following array.
         # Page	Raw Content	Array (100)	TextComponent (1024)	The raw text of the page.
         # Has Filtered Content	Boolean	
         # Filtered Content	Optional Text Component (1024)	The content after passing through chat filters. Only present if Has Filtered Content is true.
         # Resolved	Boolean	Whether entity selectors have already been resolved.
         if written_book_content:
            rawTitle: string
            filteredTitle?: string
            author: string
            generation: varint
            pages: BookPage[]varint
            # Whether entity selectors have already been resolved.
            resolved: bool
         # Name	Type	Description
         # Trim Material Type	VarInt	Identifier used to determine the data that follows. It can be either:
         # 0 - Directly represents a trim material, with the necessary data following.
         # Anything else - References a trim material in its registry, by the ID of Trim Material Type - 1.
         # Asset Name	Optional String	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Ingredient	Optional VarInt	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Item Model Index	Optional Float	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Number of Overrides	Optional VarInt	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Override	Armor Material Type	Optional Array	VarInt Enum	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Overriden Asset Name	String	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Description	Optional Text Component	See Armor Trim Material Registry. Only present if Trim Material Type is 0.
         # Trim Pattern Type	VarInt	Identifier used to determine the data that follows. It can be either:
         # 0 - Directly represents a trim pattern, with the necessary data following.
         # Anything else - References a trim pattern in its registry, by the ID of Trim Pattern Type - 1.
         # Asset Name	Optional String	See Armor Trim Pattern Registry. Only present if Trim Pattern Type is 0.
         # Template Item	Optional VarInt	See Armor Trim Pattern Registry. Only present if Trim Pattern Type is 0.
         # Description	Optional Text Component	See Armor Trim Pattern Registry. Only present if Trim Pattern Type is 0.
         # Decal	Optional Boolean	See Armor Trim Pattern Registry. Only present if Trim Pattern Type is 0.
         # Show In Tooltip	Boolean	Whether the trim information should be shown on the item's tooltip.
         if trim:
            # Identifier used to determine the data that follows. It can be either:
            # 0 - Directly represents a trim material, with the necessary data following.
            # Anything else - References a trim material in its registry, by the ID of Trim Material Type - 1.
            materialType: varint
            _: materialType ?
               if 0:
                  assetName: string
                  ingredientId: varint
                  itemModelIndex: f32
                  numberOfOverrides: optvarint
                  override: []varint
                     armorMaterialType: varint
                     overridenAssetName: string
                  description: string
            trimPatternType: varint
            _: trimPatternType ?
               if 0:
                  assetName: string
                  templateItem: varint
                  description: string
                  decal: bool
            showInTooltip: bool
         if debug_stick_state: anonymousNbt
         if entity_data: anonymousNbt
         if bucket_entity_data: anonymousNbt
         if block_entity_data: anonymousNbt
         # Name	Type	Description
         # Instrument Type	VarInt	Identifier used to determine the data that follows. It can be either:
         # 0 - Directly represents an instrument, with the necessary data following.
         # Anything else - References an instrument in its registry, by the ID of Instrument Type - 1.
         # Sound Event	Optional Sound Event	The sound to be played. Only present if Instrument Type is 0.
         # Use duration	Optional Float	The maximum range of the sound. Only present if Instrument Type is 0.
         # Range	Optional Float	The range of the instrument. Only present if Instrument Type is 0.
         if instrument:
            instrumentType: varint
            _: instrumentType ?
               if 0:
                  soundEvent: string
                  useDuration: f32
                  range: f32
         if ominous_bottle_amplifier: varint
         # Name	Type	Description
         # Direct Mode	Boolean	Whether the jukebox song is specified directly, or just referenced by name.
         # Jukebox Song Name	Optional Identifier	The name of the jukebox song in its respective registry. Only present if Direct Mode is false.
         # Jukebox Song Type	Optional VarInt	Identifier used to determine the data that follows. It can be either:
         # 0 - Directly represents a jukebox song, with the necessary data following.
         # Anything else - References a jukebox song in its registry, by the ID of Jukebox Song Type - 1.
         # Only present if Direct Mode is true.  
         # Sound Event	Optional Sound Event	The sound to be played. Only present if Direct Mode is true and Jukebox Song Type is 0.
         # Description	Optional Text Component	The description shown in the item lore. Only present if Direct Mode is true and Jukebox Song Type is 0.
         # Duration	Optional Float	The duration the songs should play for, in seconds. Only present if Direct Mode is true and Jukebox Song Type is 0.
         # Output	Optional VarInt	The output strength given by a comparator. Between 0 and 15. Only present if Direct Mode is true and Jukebox Song Type is 0.
         # Show In Tooltip	Boolean	Whether the song should be shown on the item's tooltip.
         if jukebox_playable:
            directMode: bool
            _: directMode ?
               if true:
                  jukeboxSongName: string
                  jukeboxSongType: varint
                  _: jukeboxSongType ?
                     if 0:
                        soundEvent:
                           soundEventType: varint
                           _: soundEventType ?
                              if 0:
                                 soundName: string
                                 fixedRange?: f32
                  description: anonymousNbt
                  duration: f32
                  output: varint
               if false:
                  songLocation: string
            showInTooltip: bool
         if recipes: anonymousNbt
         # Name	Type	Description
         # Has Global Position	Boolean	Whether this lodestone points to a position, otherwise it spins randomly.
         # Dimension	Identifier	The dimension the compass points to. Only present if Has Global Position is true.
         # Position	Position	The position the compass points to. Only present if Has Global Position is true.
         # Tracked	Boolean	Whether the component is removed when the associated lodestone is broken.
         if lodestone_tracker:
            globalPosition?:
               dimension: string
               position: position
            tracked: bool
         # Name	Type	Description
         # Shape	VarInt Enum	Can be one of the following:
         # 0 - Small ball
         # 1 - Large ball
         # 2 - Star
         # 3 - Creeper
         # 4 - Burst
         # Number Of Colors	VarInt	The number of elements in the following array.
         # Colors	Array of Int	The RGB components of the color, encoded as an integer.
         # Number Of Fade Colors	VarInt	The number of elements in the following array.
         # Fade Colors	Array of Int	The RGB components of the color, encoded as an integer.
         # Has Trail	Boolean	
         # Has Twinkle	Boolean	
         if firework_explosion: FireworkExplosion
         if fireworks:
            flightDuration: varint
            explosions: FireworkExplosion[]varint
         # Name	Type	Description
         # Has Name	Boolean	
         # Name	Optional String (16)	Only present if Has Name is true.
         # Has Unique ID	Boolean	
         # Unique ID	Optional UUID	Only present if Has Unique ID is true.
         # Number of Properties	VarInt	Number of elements in the following array.
         # Property	Name	Array	String (64)	
         # Value	String	
         # Has Signature	Boolean	
         # Signature	String (1024)	Only present if Has Signature is true.
         if profile:
            hasName: bool
            name: string
            hasUniqueId: bool
            uniqueId: UUID
            properties: []varint
               property: string
               value: string
               hasSignature: bool
               signature: string
         if note_block_sound: string
         # Name	Type	Description
         # Number of Layers	VarInt	Number of elements in the following array.
         # Layer	Pattern Type	Array	VarInt	Identifier used to determine the data that follows. It can be either:
         # 0 - Directly represents a pattern, with the necessary data following.
         # Anything else - References a pattern in its registry, by the ID of Pattern Type - 1.
         # Asset ID	Optional Identifier	Identifier of the asset. Only present if Pattern Type is 0.
         # Translation Key	Optional String	Only present if Pattern Type is 0.
         # Color	Dye Color	See Dye Color.
         if banner_patterns:
            layers: []varint
               patternType: varint
               _: patternType ?
                  if 0:
                     assetId: string
                     translationKey: string
               color: varint
         if base_color: varint
         if pot_decorations:
            # The ID of the items in the item registry.
            decorations: varint[]varint
         if container:
            contents: Slot[]varint
         # Name	Type	Description
         # Number of Properties	VarInt	Number of elements in the following array.
         # Property	Name	Array	String	
         # Value	String	
         if block_state:
            properties: []varint
               property: string
               value: string
         # Name	Type	Description
         # Number of Bees	VarInt	Number of elements in the following array.
         # Bee	Entity Data	Array	NBT	
         # Ticks In Hive	VarInt	
         # Min Ticks In Hive	VarInt
         if bees:
            bees: []varint
               # Custom data for the entity, always a Compound Tag. Same structure as the minecraft:custom_data component.
               nbtData: anonymousNbt
               ticksInHive: varint
               minTicksInHive: varint
         if lock: anonymousNbt
         if container_loot: anonymousNbt

   Slot:
      itemCount: varint
      _: itemCount ?
         if 0: void
         default:
            itemId: varint
# https://wiki.vg/Slot_Data#Structured_components
            addedComponentCount: varint
            removedComponentCount: varint
            components: SlotComponent[]$addedComponentCount
            removeComponents: []$removedComponentCount
               type: SlotComponentType

   FireworkExplosion:
      shape: varint =>
      - small_ball
      - large_ball
      - star
      - creeper
      - burst
      colors: i32[]varint
      fadeColors: i32[]varint
      hasTrail: bool
      hasTwinkle: bool

   BookPage:
      content: string
      filteredContent?: string

   EffectDetail:
      amplifier: varint
      duration: varint
      ambient: bool
      showParticles: bool
      showIcon: bool
      hiddenEffect?: EffectDetail

   PotionEffect:
      id: varint
      details: EffectDetail

   ConsumeEffect:
      type: varint =>
      - apply_effects
      - remove_effects
      - clear_all_effects
      - teleport_randomly
      - play_sound
      _: type ?
         if apply_effects:
            effects: PotionEffect[]varint
            probability: f32
         if remove_effects:
            effects: IDSet
         if clear_all_effects: void
         if teleport_randomly:
            diameter: f32
         if play_sound:
            sound: ["registryEntryHolder", {
               "baseName": "soundId",
               "otherwise": { name: "data", type: "SoundEvent" }
            }]

   BlockProperty:
      # Name of the block state property.
      name: string
      # Whether this is an exact value match, as opposed to ranged.
      isExactMatch: bool
      # Value of the block state property. Only present in exact match mode.
      exactValue?: string
      # Minimum value of the block state property range. Only present in ranged match mode.
      minValue?: string
      # Maximum value of the block state property range. Only present in ranged match mode.
      maxValue?: string

   BlockPredicate:
      blockSet?: ["registryEntryHolderSet", {
         "base": { name: "name", type: "string" },
         "otherwise": { name: "blockIds", type: "varint" }
      }]
      properties?: BlockProperty[]varint
      nbt: anonOptionalNbt

   Particle:
      # See client/net/minecraft/core/particles/ParticleTypes.java
      type: varint =>
      - angry_villager
      - block
      - block_marker
      - bubble
      - cloud
      - crit
      - damage_indicator
      - dragon_breath
      - dripping_lava
      - falling_lava
      - landing_lava
      - dripping_water
      - falling_water
      - dust
      - dust_color_transition
      - effect
      - elder_guardian
      - enchanted_hit
      - enchant
      - end_rod
      - entity_effect
      - explosion_emitter
      - explosion
      - gust
      - small_gust
      - gust_emitter_large
      - gust_emitter_small
      - sonic_boom
      - falling_dust
      - firework
      - fishing
      - flame
      - infested
      - cherry_leaves
      - pale_oak_leaves
      - sculk_soul
      - sculk_charge
      - sculk_charge_pop
      - soul_fire_flame
      - soul
      - flash
      - happy_villager
      - composter
      - heart
      - instant_effect
      - item
      - vibration
      - trail
      - item_slime
      - item_cobweb
      - item_snowball
      - large_smoke
      - lava
      - mycelium
      - note
      - poof
      - portal
      - rain
      - smoke
      - white_smoke
      - sneeze
      - spit
      - squid_ink
      - sweep_attack
      - totem_of_undying
      - underwater
      - splash
      - witch
      - bubble_pop
      - current_down
      - bubble_column_up
      - nautilus
      - dolphin
      - campfire_cosy_smoke
      - campfire_signal_smoke
      - dripping_honey
      - falling_honey
      - landing_honey
      - falling_nectar
      - falling_spore_blossom
      - ash
      - crimson_spore
      - warped_spore
      - spore_blossom_air
      - dripping_obsidian_tear
      - falling_obsidian_tear
      - landing_obsidian_tear
      - reverse_portal
      - white_ash
      - small_flame
      - snowflake
      - dripping_dripstone_lava
      - falling_dripstone_lava
      - dripping_dripstone_water
      - falling_dripstone_water
      - glow_squid_ink
      - glow
      - wax_on
      - wax_off
      - electric_spark
      - scrape
      - shriek
      - egg_crack
      - dust_plume
      - trial_spawner_detected_player
      - trial_spawner_detected_player_ominous
      - vault_connection
      - dust_pillar
      - ominous_spawning
      - raid_omen
      - trial_omen
      - block_crumble
      ## ## Tips for reviewing particle data (as of 1.20.5)
      ## Inside the registry code, each particle can have an associated "options" type and
      ## each options type can add additional data to be encoded.
      ## For example, this line
      ##    public static final ParticleType<BlockParticleOption> BLOCK = register("block", false, BlockParticleOption::codec, BlockParticleOption::streamCodec);
      ## will read the stream codec from BlockParticleOption.java's streamCodec member; then we see
      ##       return ByteBufCodecs.idMapper(Block.BLOCK_STATE_REGISTRY).map(var1 -> new BlockParticleOption(var0, var1), var0x -> var0x.state);
      ## this encodes with the ByteBufCodecs.idMapper function. Inside this function we find
      ##      public void encode(ByteBuf var1x, T var2) {
      ##          int var3 = var1.applyAsInt(var2);
      ##          VarInt.write(var1x, var3);
      ##       }
      ## which as we can see writes the varint to the buffer.
      ## If you want to see all the serializers try regexp searching "StreamCodec.*Particle"
      data: type ?
         if block or block_marker or falling_dust or dust_pillar or block_crumble: varint
         if dust:
            red: f32
            green: f32
            blue: f32
            scale: f32
         if dust_color_transition:
            fromRed: f32
            fromGreen: f32
            fromBlue: f32
            scale: f32
            toRed: f32
            toGreen: f32
            toBlue: f32
         if entity_effect: i32
         if item: Slot
         if sculk_charge: f32
         if shriek: varint
         if vibration:
            position_type: varint =>
            - block
            - entity
            position: position_type ?
               if block: position
               if entity:
                  entityId: varint
                  entity_eye_height: f32
            ticks: varint
         if trail:
            target: vec3f64
            color: u8
   ingredient: Slot[]varint
   position: [
      "bitfield",
      [
         {
            "name": "x",
            "size": 26,
            "signed": true
         },
         {
            "name": "z",
            "size": 26,
            "signed": true
         },
         {
            "name": "y",
            "size": 12,
            "signed": true
         }
      ]
   ]
   soundSource: varint =>
      0: master
      1: music
      2: record
      3: weather
      4: block
      5: hostile
      6: neutral
      7: player
      8: ambient
      9: voice
   packedChunkPos:
      z: i32
      x: i32
   previousMessages: []varint
      id: varint
      signature: id ?
         if 0: [
            "buffer",
            {
               "count": 256
            }
         ]
         default: void
   entityMetadataEntry:
      key: u8
      type: varint =>
      - byte
      - int
      - long
      - float
      - string
      - component
      - optional_component
      - item_stack
      - boolean
      - rotations
      - block_pos
      - optional_block_pos
      - direction
      - optional_uuid
      - block_state
      - optional_block_state
      - compound_tag
      - particle
      - particles
      - villager_data
      - optional_unsigned_int
      - pose
      - cat_variant
      - wolf_variant
      - frog_variant
      - optional_global_pos
      - painting_variant
      - sniffer_state
      - armadillo_state
      - vector3
      - quaternion
      value: type ?
         if byte: i8
         if int: varint
         if long: varlong
         if float: f32
         if string: string
         if component: anonymousNbt
         if optional_component: ["option", "anonymousNbt"]
         if item_stack: Slot
         if boolean: bool
         if rotations:
            pitch: f32
            yaw: f32
            roll: f32
         if block_pos: position
         if optional_block_pos: ["option", "position"]
         if direction: varint
         if optional_uuid: ["option", "UUID"]
         if block_state: varint
         if optional_block_state: optvarint
         if compound_tag: anonymousNbt
         if particle: Particle
         if particles: Particle[]varint
         if villager_data:
            villagerType: varint
            villagerProfession: varint
            level: varint
         if optional_unsigned_int: optvarint
         if pose: varint
         if cat_variant: varint
         if wolf_variant: ["registryEntryHolder", {
            "baseName": "variantId",
            "otherwise": { name: "variantData", type: "EntityMetadataWolfVariant" }
         }]
         if frog_variant: varint
         if optional_global_pos: ["option", "string"]
         if painting_variant: ["registryEntryHolder", {
            "baseName": "variantId",
            "otherwise": { name: "variantData", type: "EntityMetadataPaintingVariant" }
         }]
         if sniffer_state: varint
         if armadillo_state: varint
         if vector3: vec3f
         if quaternion: vec4f
   EntityMetadataPaintingVariant:
      width: i32
      height: i32
      assetId: string
      title?: anonymousNbt
      author?: anonymousNbt
   EntityMetadataWolfVariant:
      wildTexture: string
      tameTexture: string
      angryTexture: string
      biome: IDSet

   entityMetadata: ["entityMetadataLoop", { "endVal": 255, "type": "entityMetadataEntry" }]
   tags: []varint
      tagName: string
      entries: varint[]varint
   chunkBlockEntity:
      _: [
         "bitfield",
         [
            {
               "name": "x",
               "size": 4,
               "signed": false
            },
            {
               "name": "z",
               "size": 4,
               "signed": false
            }
         ]
      ]
      y: i16
      type: varint
      nbtData: anonOptionalNbt
   chat_session?:
      uuid: UUID
      publicKey:
         expireTime: i64
         keyBytes: [
            "buffer",
            {
               "countType": "varint"
            }
         ]
         keySignature: [
            "buffer",
            {
               "countType": "varint"
            }
         ]
   game_profile:
      name: string
      properties: []varint
         key: string
         value: string
         signature?: string
   command_node:
      flags: [
         "bitfield",
         [
            {
               "name": "unused",
               "size": 3,
               "signed": false
            },
            {
               "name": "has_custom_suggestions",
               "size": 1,
               "signed": false
            },
            {
               "name": "has_redirect_node",
               "size": 1,
               "signed": false
            },
            {
               "name": "has_command",
               "size": 1,
               "signed": false
            },
            {
               "name": "command_node_type",
               "size": 2,
               "signed": false
            }
         ]
      ]
      children: varint[]varint
      redirectNode: flags/has_redirect_node ?
         if 1: varint
         default: void
      extraNodeData: flags/command_node_type ?
         if 0: void
         if 1:
            name: string
         if 2:
            name: string
            parser: varint =>
            - brigadier:bool
            - brigadier:float
            - brigadier:double
            - brigadier:integer
            - brigadier:long
            - brigadier:string
            - minecraft:entity
            - minecraft:game_profile
            - minecraft:block_pos
            - minecraft:column_pos
            - minecraft:vec3
            - minecraft:vec2
            - minecraft:block_state
            - minecraft:block_predicate
            - minecraft:item_stack
            - minecraft:item_predicate
            - minecraft:color
            - minecraft:component
            - minecraft:style
            - minecraft:message
            - minecraft:nbt
            - minecraft:nbt_tag
            - minecraft:nbt_path
            - minecraft:objective
            - minecraft:objective_criteria
            - minecraft:operation
            - minecraft:particle
            - minecraft:angle
            - minecraft:rotation
            - minecraft:scoreboard_slot
            - minecraft:score_holder
            - minecraft:swizzle
            - minecraft:team
            - minecraft:item_slot
            - minecraft:item_slots # 1.20.5
            - minecraft:resource_location
            - minecraft:function
            - minecraft:entity_anchor
            - minecraft:int_range
            - minecraft:float_range
            - minecraft:dimension
            - minecraft:gamemode
            - minecraft:time
            - minecraft:resource_or_tag
            - minecraft:resource_or_tag_key
            - minecraft:resource
            - minecraft:resource_key
            - minecraft:template_mirror
            - minecraft:template_rotation
            - minecraft:heightmap
            - minecraft:loot_table # 1.20.5
            - minecraft:loot_predicate # 1.20.5
            - minecraft:loot_modifier # 1.20.5
            - minecraft:uuid
            properties: parser ?
               if brigadier:bool: void
               if brigadier:float:
                  flags: [
                     "bitfield",
                     [
                        {
                           "name": "unused",
                           "size": 6,
                           "signed": false
                        },
                        {
                           "name": "max_present",
                           "size": 1,
                           "signed": false
                        },
                        {
                           "name": "min_present",
                           "size": 1,
                           "signed": false
                        }
                     ]
                  ]
                  min: flags/min_present ?
                     if 1: f32
                     default: void
                  max: flags/max_present ?
                     if 1: f32
                     default: void
               if brigadier:double:
                  flags: [
                     "bitfield",
                     [
                        {
                           "name": "unused",
                           "size": 6,
                           "signed": false
                        },
                        {
                           "name": "max_present",
                           "size": 1,
                           "signed": false
                        },
                        {
                           "name": "min_present",
                           "size": 1,
                           "signed": false
                        }
                     ]
                  ]
                  min: flags/min_present ?
                     if 1: f64
                     default: void
                  max: flags/max_present ?
                     if 1: f64
                     default: void
               if brigadier:integer:
                  flags: [
                     "bitfield",
                     [
                        {
                           "name": "unused",
                           "size": 6,
                           "signed": false
                        },
                        {
                           "name": "max_present",
                           "size": 1,
                           "signed": false
                        },
                        {
                           "name": "min_present",
                           "size": 1,
                           "signed": false
                        }
                     ]
                  ]
                  min: flags/min_present ?
                     if 1: i32
                     default: void
                  max: flags/max_present ?
                     if 1: i32
                     default: void
               if brigadier:long:
                  flags: [
                     "bitfield",
                     [
                        {
                           "name": "unused",
                           "size": 6,
                           "signed": false
                        },
                        {
                           "name": "max_present",
                           "size": 1,
                           "signed": false
                        },
                        {
                           "name": "min_present",
                           "size": 1,
                           "signed": false
                        }
                     ]
                  ]
                  min: flags/min_present ?
                     if 1: i64
                     default: void
                  max: flags/max_present ?
                     if 1: i64
                     default: void
               if brigadier:string: varint =>
                  0: SINGLE_WORD
                  1: QUOTABLE_PHRASE
                  2: GREEDY_PHRASE
               if minecraft:entity: [
                  "bitfield",
                  [
                     {
                        "name": "unused",
                        "size": 6,
                        "signed": false
                     },
                     {
                        "name": "onlyAllowPlayers",
                        "size": 1,
                        "signed": false
                     },
                     {
                        "name": "onlyAllowEntities",
                        "size": 1,
                        "signed": false
                     }
                  ]
               ]
               if minecraft:game_profile: void
               if minecraft:block_pos: void
               if minecraft:column_pos: void
               if minecraft:vec3: void
               if minecraft:vec2: void
               if minecraft:block_state: void
               if minecraft:block_predicate: void
               if minecraft:item_stack: void
               if minecraft:item_predicate: void
               if minecraft:color: void
               if minecraft:component: void
               if minecraft:message: void
               if minecraft:nbt: void
               if minecraft:nbt_path: void
               if minecraft:objective: void
               if minecraft:objective_criteria: void
               if minecraft:operation: void
               if minecraft:particle: void
               if minecraft:angle: void
               if minecraft:rotation: void
               if minecraft:scoreboard_slot: void
               if minecraft:score_holder: [
                  "bitfield",
                  [
                     {
                        "name": "unused",
                        "size": 7,
                        "signed": false
                     },
                     {
                        "name": "allowMultiple",
                        "size": 1,
                        "signed": false
                     }
                  ]
               ]
               if minecraft:swizzle: void
               if minecraft:team: void
               if minecraft:item_slot: void
               if minecraft:resource_location: void
               if minecraft:function: void
               if minecraft:entity_anchor: void
               if minecraft:int_range: void
               if minecraft:float_range: void
               if minecraft:dimension: void
               if minecraft:gamemode: void
               if minecraft:time:
                  min: i32
               if minecraft:resource_or_tag:
                  registry: string
               if minecraft:resource_or_tag_key:
                  registry: string
               if minecraft:resource:
                  registry: string
               if minecraft:resource_key:
                  registry: string
               if minecraft:template_mirror: void
               if minecraft:template_rotation: void
               if minecraft:heightmap: void
               if minecraft:uuid: void
            suggestionType: ../flags/has_custom_suggestions ?
               if 1: string
               default: void
# Shared Packets
# These are packets that are shared between multiple states.
# They are defined here to avoid duplication.
# =====
# MC: ClientboundCookieRequestPacket
# wiki.vg: Cookie Request (login)
# Requests a cookie that was previously stored.
packet_common_cookie_request:
   cookie: string

# MC: ClientboundStoreCookiePacket
# wiki.vg: Store Cookie (configuration)
# Stores some arbitrary data on the client, which persists between server transfers. The Notchian client only accepts cookies of up to 5 kiB in size.
packet_common_store_cookie:
   key: string
   value: ByteArray

# MC: ClientboundTransferPacket
# wiki.vg: Transfer (configuration)
# Notifies the client that it should transfer to the given server. Cookies previously stored are preserved between server transfers.
packet_common_transfer:
   host: string
   port: varint

# MC: ServerboundCookieResponsePacket
# wiki.vg: Cookie Response (login)
# Response to a Cookie Request (login) from the server. The Notchian server only accepts responses of up to 5 kiB in size.
packet_common_cookie_response:
   key: string
   value: ByteArray

# MC: ServerboundSelectKnownPacks
# MC: ClientboundSelectKnownPacks
# wiki.vg: Clientbound Known Packs
# Informs the client of which data packs are present on the server. The client is expected to respond with its own Serverbound Known Packs packet. The Notchian server does not continue with Configuration until it receives a response.
# The Notchian client requires the minecraft:core pack with version 1.21.4 for a normal login sequence. This packet must be sent before the Registry Data packets.
packet_common_select_known_packs:
   packs: []varint
      namespace: string
      id: string
      version: string

# MC: ClientboundCustomReportDetailsPacket
# wiki.vg: Custom Report Details (configuration)
# Contains a list of key-value text entries that are included in any crash or disconnection report generated during connection to the server.
packet_common_custom_report_details:
   details: []varint
      key: string
      value: string

# MC: ClientboundResourcePackPopPacket
# wiki.vg: Remove Resource Pack (configuration)
# Removes a resource pack from the client.
packet_common_remove_resource_pack:
   uuid?: UUID

# MC: ClientboundResourcePackPushPacket
# wiki.vg: Add Resource Pack (configuration)
# Adds a resource pack to the client.
packet_common_add_resource_pack:
   uuid: UUID
   url: string
   hash: string
   forced: bool
   promptMessage?: anonymousNbt

ServerLinkType: varint =>
- bug_report
- community_guidelines
- support
- status
- feedback
- community
- website
- forums
- news
- announcements

# MC: ClientboundServerLinksPacket
# wiki.vg: Server Links (configuration)
# This packet contains a list of links that the Notchian client will display in the menu available from the pause menu. Link labels can be built-in or custom (i.e., any text).
packet_common_server_links:
   links: []varint
      hasKnownType: bool
      knownType: hasKnownType ?
         if true: ServerLinkType
      unknownType: hasKnownType ?
         if false: anonymousNbt
      link: string

^handshaking.toClient.types:
   packet:
      name: varint =>
      params: ["switch",{"compareTo":"name","fields":{}}]
^handshaking.toServer.types:
   packet_set_protocol:
      protocolVersion: varint
      serverHost: string
      serverPort: u16
      nextState: varint
   packet_legacy_server_list_ping:
      payload: u8
   packet:
      name: varint =>
         0x00: set_protocol
         0xfe: legacy_server_list_ping
      params: name ?
         if set_protocol: packet_set_protocol
         if legacy_server_list_ping: packet_legacy_server_list_ping

^status.toClient.types:
   # MC: ClientboundStatusResponsePacket
   # wiki.vg: Status Response
   # Sent by the server in response to a Status Request packet. Contains server information in JSON format.
   packet_server_info:
      response: string
   # MC: ClientboundPongResponsePacket
   # wiki.vg: Pong Response (status)
   # Sent by the server in response to a Ping Request packet. Contains the same timestamp as the Ping Request.
   packet_ping:
      time: i64
   packet:
      name: varint =>
         0x00: server_info
         0x01: ping
      params: name ?
         if server_info: packet_server_info
         if ping: packet_ping

^status.toServer.types:
   # MC: ServerboundStatusRequestPacket
   # wiki.vg: Status Request
   # Sent by the client to request server status information.
   packet_ping_start:
      # Empty
   # MC: ServerboundPingRequestPacket
   # wiki.vg: Ping Request (status)
   # Sent by the client to measure the latency to the server. The server responds with a Pong Response packet containing the same timestamp.
   packet_ping:
      time: i64
   packet:
      name: varint =>
         0x00: ping_start
         0x01: ping
      params: name ?
         if ping_start: packet_ping_start
         if ping: packet_ping

^login.toClient.types:
   # MC: ClientboundLoginDisconnectPacket
   # wiki.vg: Disconnect (login)
   # Sent by the server to disconnect the client during the login process. The client will display the reason to the user.
   packet_disconnect:
      reason: string
   # MC: ClientboundHelloPacket
   # wiki.vg: Encryption Request
   # Sent by the server to request encryption during the login process. Contains the server's public key and a verify token.
   packet_encryption_begin:
      serverId: string
      publicKey: [
         "buffer",
         {
            "countType": "varint"
         }
      ]
      verifyToken: [
         "buffer",
         {
            "countType": "varint"
         }
      ]
      shouldAuthenticate: bool
   # MC: ClientboundLoginFinishedPacket
   # wiki.vg: Login Success
   # Sent by the server to indicate that the login process was successful. Contains the player's UUID and username.
   packet_success:
      uuid: UUID
      username: string
      properties: []varint
         name: string
         value: string
         signature?: string
   # MC: ClientboundLoginCompressionPacket
   # wiki.vg: Set Compression
   # Sent by the server to enable compression for all subsequent packets. If compression is enabled, all following packets are encoded in the compressed packet format.
   packet_compress:
      threshold: varint
   # MC: ClientboundCustomQueryPacket
   # wiki.vg: Login Plugin Request
   # Used to implement a custom handshaking flow together with Login Plugin Response.
   packet_login_plugin_request:
      messageId: varint
      channel: string
      data: restBuffer
   ## (Cookie Request is Common) ##
   packet:
      name: varint =>
      - disconnect
      - encryption_begin
      - success
      - compress
      - login_plugin_request
      - cookie_request
      params: name ?
         if disconnect: packet_disconnect
         if encryption_begin: packet_encryption_begin
         if success: packet_success
         if compress: packet_compress
         if login_plugin_request: packet_login_plugin_request
         if cookie_request: packet_common_cookie_request

^login.toServer.types:
   # MC: ServerboundHelloPacket
   # wiki.vg: Login Start
   # Sent by the client to initiate the login process. Contains the player's username and UUID.
   packet_login_start:
      username: string
      playerUUID: UUID
   # MC: ServerboundKeyPacket
   # wiki.vg: Encryption Response
   # Sent by the client in response to an Encryption Request packet. Contains the shared secret and verify token encrypted with the server's public key.
   packet_encryption_begin:
      sharedSecret: [
         "buffer",
         {
            "countType": "varint"
         }
      ]
      verifyToken: [
         "buffer",
         {
            "countType": "varint"
         }
      ]
   # MC: ServerboundCustomQueryAnswerPacket
   # wiki.vg: Login Plugin Response
   # Sent by the client in response to a Login Plugin Request packet. Contains the response data for the custom handshaking flow.
   packet_login_plugin_response:
      messageId: varint
      data?: restBuffer
   # MC: ServerboundLoginAcknowledgedPacket
   # wiki.vg: Login Acknowledged
   # Sent by the client to acknowledge the Login Success packet. This packet switches the connection state to configuration.
   packet_login_acknowledged:
      # Empty
   ## (Cookie Response is Common) ##
   packet:
      name: varint =>
      - login_start
      - encryption_begin
      - login_plugin_response
      - login_acknowledged
      - cookie_response
      params: name ?
         if login_start: packet_login_start
         if encryption_begin: packet_encryption_begin
         if login_plugin_response: packet_login_plugin_response
         if login_acknowledged: packet_login_acknowledged
         if cookie_response: packet_common_cookie_response

^configuration.toClient.types:
   ## (Cookie Request is common)
   # MC: ClientboundCustomPayloadPacket
   # wiki.vg: Clientbound Plugin Message (configuration)
   # Mods and plugins can use this to send their data. Minecraft itself uses several plugin channels. These internal channels are in the minecraft namespace.
   packet_custom_payload:
      channel: string
      data: restBuffer
   # MC: ClientboundDisconnectPacket
   # wiki.vg: Disconnect (configuration)
   # Sent by the server to disconnect the client during the configuration process. The client will display the reason to the user.
   packet_disconnect:
      reason: anonymousNbt
   # MC: ClientboundFinishConfigurationPacket
   # wiki.vg: Finish Configuration
   # Sent by the server to notify the client that the configuration process has finished. The client answers with Acknowledge Finish Configuration whenever it is ready to continue.
   packet_finish_configuration:
      # Empty
   # MC: ClientboundKeepAlivePacket
   # wiki.vg: Clientbound Keep Alive (configuration)
   # The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same payload (see Serverbound Keep Alive). If the client does not respond to a Keep Alive packet within 15 seconds after it was sent, the server kicks the client. Vice versa, if the server does not send any keep-alives for 20 seconds, the client will disconnect and yields a "Timed out" exception.
   packet_keep_alive:
      keepAliveId: i64
   # MC: ClientboundPingPacket
   # wiki.vg: Ping (configuration)
   # Packet is not used by the Notchian server. When sent to the client, client responds with a Pong packet with the same id.
   packet_ping:
      id: i32
   # MC: ClientboundResetChatPacket
   # wiki.vg: Reset Chat
   # Resets the client's chat history.
   packet_reset_chat:
      # Empty
   # MC: ClientboundRegistryDataPacket
   # wiki.vg: Registry Data
   # Represents certain registries that are sent from the server and are applied on the client.
   packet_registry_data:
      # The server can send multiple registries
      id: string
      entries: []varint
         key: string
         value?: anonymousNbt
   ## (Store cookie and Transfer are Common) ##
   # MC: ClientboundUpdateEnabledFeaturesPacket
   # wiki.vg: Feature Flags
   # Used to enable and disable features, generally experimental ones, on the client.
   packet_feature_flags:
      features: string[]varint
   # MC: ClientboundUpdateTagsPacket
   # wiki.vg: Update Tags (configuration)
   # Updates the tags for blocks, items, entities, etc.
   packet_tags:
      tags: []varint
         tagType: string
         tags: tags
   ## (Select known packs is common)
   packet:
      name: varint =>
      - cookie_request
      - custom_payload
      - disconnect
      - finish_configuration
      - keep_alive
      - ping
      - reset_chat
      - registry_data
      - remove_resource_pack
      - add_resource_pack
      - store_cookie
      - transfer
      - feature_flags
      - tags
      - select_known_packs
      - custom_report_details
      - server_links
      params: name ?
         if cookie_request: packet_common_cookie_request
         if custom_payload: packet_custom_payload
         if disconnect: packet_disconnect
         if finish_configuration: packet_finish_configuration
         if keep_alive: packet_keep_alive
         if ping: packet_ping
         if reset_chat: packet_reset_chat
         if registry_data: packet_registry_data
         if remove_resource_pack: packet_common_remove_resource_pack
         if add_resource_pack: packet_common_add_resource_pack
         if store_cookie: packet_common_store_cookie
         if transfer: packet_common_transfer
         if feature_flags: packet_feature_flags
         if tags: packet_tags
         if select_known_packs: packet_common_select_known_packs
         if custom_report_details: packet_common_custom_report_details
         if server_links: packet_common_server_links

^configuration.toServer.types:
   # MC: ServerboundClientInformationPacket
   # wiki.vg: Client Information (configuration)
   # Sent when the player connects, or when settings are changed.
   packet_settings:
      locale: string
      viewDistance: i8
      chatFlags: varint
      chatColors: bool
      skinParts: u8
      mainHand: varint
      enableTextFiltering: bool
      enableServerListing: bool
      particles: varint
   ## (Cookie Response is Common) ##
   # MC: ServerboundCustomPayloadPacket
   # wiki.vg: Serverbound Plugin Message (configuration)
   # Mods and plugins can use this to send their data. Minecraft itself uses some plugin channels. These internal channels are in the minecraft namespace.
   packet_custom_payload:
      channel: string
      data: restBuffer
   # MC: ServerboundFinishConfigurationPacket
   # wiki.vg: Acknowledge Finish Configuration
   # Sent by the client to notify the server that the configuration process has finished. It is sent in response to the server's Finish Configuration.
   packet_finish_configuration:
      # Empty
   # MC: ServerboundKeepAlivePacket
   # wiki.vg: Serverbound Keep Alive (configuration)
   # The server will frequently send out a keep-alive (see Clientbound Keep Alive), each containing a random ID. The client must respond with the same packet.
   packet_keep_alive:
      keepAliveId: i64
   # MC: ServerboundPongPacket
   # wiki.vg: Pong (configuration)
   # Response to the clientbound packet (Ping) with the same id.
   packet_pong:
      id: i32
   # MC: ServerboundResourcePackPacket
   # wiki.vg: Resource Pack Response (configuration)
   # Response to the clientbound packet (Add Resource Pack) with the same id.
   packet_resource_pack_receive:
      uuid: UUID
      result: varint
   packet:
      name: varint =>
      - settings
      - cookie_response
      - custom_payload
      - finish_configuration
      - keep_alive
      - pong
      - resource_pack_receive
      - select_known_packs
      - custom_report_details
      - server_links
      params: name ?
         if settings: packet_settings
         if cookie_response: packet_common_cookie_response
         if custom_payload: packet_custom_payload
         if finish_configuration: packet_finish_configuration
         if keep_alive: packet_keep_alive
         if pong: packet_pong
         if resource_pack_receive: packet_resource_pack_receive
         if select_known_packs: packet_common_select_known_packs
         if custom_report_details: packet_common_custom_report_details
         if server_links: packet_common_server_links

^play.toClient.types:
   # World state information for spawn and respawn packets
   # World state information for spawn and respawn packets
   SpawnInfo:
      dimension: varint
      name: string
      hashedSeed: i64
      gamemode: i8 =>
      - survival
      - creative
      - adventure
      - spectator
      previousGamemode: u8
      isDebug: bool
      isFlat: bool
      death?:
         dimensionName: string
         location: position
      portalCooldown: varint
      seaLevel: varint

   # MC: ClientboundAddEntityPacket
   # wiki.vg: Spawn Entity
   # Sent by the server when an entity (aside from Experience Orb) is created.
   packet_spawn_entity:
      entityId: varint
      objectUUID: UUID
      type: varint
      x: f64
      y: f64
      z: f64
      pitch: i8
      yaw: i8
      headPitch: i8
      objectData: varint
      velocityX: i16
      velocityY: i16
      velocityZ: i16
   # MC: ClientboundAddExperienceOrbPacket
   # wiki.vg: Spawn Experience Orb
   # Spawns one or more experience orbs.
   packet_spawn_entity_experience_orb:
      entityId: varint
      x: f64
      y: f64
      z: f64
      count: i16
   # MC: ClientboundAnimatePacket
   # wiki.vg: Entity Animation
   # Sent whenever an entity should change animation.
   packet_animation:
      entityId: varint
      animation: u8
   # MC: ClientboundAwardStatsPacket
   # wiki.vg: Award Statistics
   # Sent as a response to Client Status (id 1). Will only send the changed values if previously requested.
   packet_statistics:
      entries: []varint
         categoryId: varint
         statisticId: varint
         value: varint
   # MC: ClientboundBlockChangedAckPacket
   # wiki.vg: Acknowledge Block Change
   # Acknowledges a user-initiated block change. After receiving this packet, the client will display the block state sent by the server instead of the one predicted by the client.
   packet_acknowledge_player_digging:
      sequenceId: varint
   # MC: ClientboundBlockDestructionPacket
   # wiki.vg: Set Block Destroy Stage
   # 0–9 are the displayable destroy stages and each other number means that there is no animation on this coordinate.
   packet_block_break_animation:
      entityId: varint
      location: position
      destroyStage: i8
   # MC: ClientboundBlockEntityDataPacket
   # wiki.vg: Block Entity Data
   # Sets the block entity associated with the block at the given location.
   packet_tile_entity_data:
      location: position
      action: varint
      nbtData: anonOptionalNbt
   # MC: ClientboundBlockEventPacket
   # wiki.vg: Block Action
   # This packet is used for a number of actions and animations performed by blocks, usually non-persistent. The client ignores the provided block type and instead uses the block state in their world.
   packet_block_action:
      location: position
      byte1: u8
      byte2: u8
      blockId: varint
   # MC: ClientboundBlockUpdatePacket
   # wiki.vg: Block Update
   # Fired whenever a block is changed within the render distance.
   packet_block_change:
      location: position
      type: varint
   # MC: ClientboundBossEventPacket
   # wiki.vg: Boss Bar
   # Sent by the server to display or update a boss bar.
   packet_boss_bar:
      entityUUID: UUID
      action: varint
      title: action ?
         if 0: anonymousNbt
         if 3: anonymousNbt
         default: void
      health: action ?
         if 0: f32
         if 2: f32
         default: void
      color: action ?
         if 0: varint
         if 4: varint
         default: void
      dividers: action ?
         if 0: varint
         if 4: varint
         default: void
      flags: action ?
         if 0: u8
         if 5: u8
         default: void
   # MC: ClientboundChangeDifficultyPacket
   # wiki.vg: Change Difficulty
   # Changes the difficulty setting in the client's option menu.
   packet_difficulty:
      difficulty: u8
      difficultyLocked: bool
   # MC: ClientboundChunkBatchFinishedPacket
   # wiki.vg: Chunk Batch Finished
   # Marks the end of a chunk batch. The Notchian client marks the time it receives this packet and calculates the elapsed duration since the beginning of the chunk batch.
   packet_chunk_batch_finished:
      batchSize: varint
   # MC: ClientboundChunkBatchStartPacket
   # wiki.vg: Chunk Batch Start
   # Marks the start of a chunk batch. The Notchian client marks and stores the time it receives this packet.
   packet_chunk_batch_start:
      # Empty
   # MC: ClientboundChunksBiomesPacket
   # wiki.vg: Chunk Biomes
   # Sent by the server to update the biomes of a chunk.
   packet_chunk_biomes:
      biomes: []varint
         position: packedChunkPos
         data: ByteArray
   # MC: ClientboundClearTitlesPacket
   # wiki.vg: Clear Titles
   # Clear the client's current title information, with the option to also reset it.
   packet_clear_titles:
      reset: bool
   # MC: ClientboundCommandSuggestionsPacket
   # wiki.vg: Command Suggestions Response
   # The server responds with a list of auto-completions of the last word sent to it. In the case of regular chat, this is a player username. Command names and parameters are also supported.
   packet_tab_complete:
      transactionId: varint
      start: varint
      length: varint
      matches: []varint
         match: string
         tooltip?: anonymousNbt
   # MC: ClientboundCommandsPacket
   # wiki.vg: Commands
   # Lists all of the commands on the server, and how they are parsed.
   packet_declare_commands:
      nodes: command_node[]varint
      rootIndex: varint
   # MC: ClientboundContainerClosePacket
   # wiki.vg: Close Container
   # This packet is sent from the server to the client when a window is forcibly closed, such as when a chest is destroyed while it's open.
   packet_close_window:
      windowId: ContainerID
   # MC: ClientboundContainerSetContentPacket
   # wiki.vg: Set Container Content
   # Replaces the contents of a container window. Sent by the server upon initialization of a container window or the player's inventory, and in response to state ID mismatches.
   packet_window_items:
      windowId: ContainerID
      stateId: varint
      items: Slot[]varint
      carriedItem: Slot
   # MC: ClientboundContainerSetDataPacket
   # wiki.vg: Set Container Property
   # This packet is used to inform the client that part of a GUI window should be updated.
   packet_craft_progress_bar:
      windowId: ContainerID
      property: i16
      value: i16
   # MC: ClientboundContainerSetSlotPacket
   # wiki.vg: Set Container Slot
   # Sent by the server when an item in a slot (in a window) is added/removed.
   packet_set_slot:
      windowId: ContainerID
      stateId: varint
      slot: i16
      item: Slot
   ## (Cookie Request is Common)
   # MC: ClientboundCooldownPacket
   # wiki.vg: Set Cooldown
   # Applies a cooldown period to all items with the given type. Used by the Notchian server with enderpearls.
   packet_set_cooldown:
      # TODO: figure out what this is
      cooldownGroup: string
      cooldownTicks: varint
   # MC: ClientboundCustomChatCompletionsPacket
   # wiki.vg: Chat Suggestions
   # Unused by the Notchian server. Likely provided for custom servers to send chat message completions to clients.
   packet_chat_suggestions:
      action: varint
      entries: string[]varint
   # MC: ClientboundCustomPayloadPacket
   # wiki.vg: Clientbound Plugin Message (play)
   # Mods and plugins can use this to send their data. Minecraft itself uses several plugin channels. These internal channels are in the minecraft namespace.
   packet_custom_payload:
      channel: string
      data: restBuffer
   # MC: ClientboundDamageEventPacket
   # wiki.vg: Damage Event
   # Sent by the server when an entity takes damage.
   packet_damage_event:
      entityId: varint
      sourceTypeId: varint
      sourceCauseId: varint
      sourceDirectId: varint
      sourcePosition?: vec3f64
   # MC: ClientboundDebugSamplePacket
   # wiki.vg: Debug Sample
   # Sample data that is sent periodically after the client has subscribed with Debug Sample Subscription.
   packet_debug_sample:
      sample: i64[]varint
      type: varint
   # MC: ClientboundDeleteChatPacket
   # wiki.vg: Delete Message
   # Removes a message from the client's chat. This only works for messages with signatures, system messages cannot be deleted with this packet.
   packet_hide_message:
      id: varint
      signature: id ?
         if 0: [
            "buffer",
            {
               "count": 256
            }
         ]
         default: void
   # MC: ClientboundDisconnectPacket
   # wiki.vg: Disconnect (play)
   # Sent by the server before it disconnects a client. The client assumes that the server has already closed the connection by the time the packet arrives.
   packet_kick_disconnect:
      reason: anonymousNbt

   ## client\net\minecraft\network\chat\ChatTypeDecoration.java
   ## via client\net\minecraft\network\chat\ChatType.java
   ChatTypeParameterType: varint =>
      - content
      - sender
      - target
   ChatType:
      translationKey: string
      parameters: ChatTypeParameterType[]varint
      style: anonymousNbt
   ChatTypes:
      # Either the extra data is retrieved from the registry (via this ID+1 if non-zero), or it's supplied inline in the chat packet
      registryIndex: varint
      _: registryIndex ?
         if 0:
            chat: ChatType
            narration: ChatType
         default: void

   # MC: ClientboundDisguisedChatPacket
   # wiki.vg: Disguised Chat Message
   # Sends the client a chat message, but without any message signing information.
   packet_profileless_chat:
      message: anonymousNbt
      type: ChatTypes
      name: anonymousNbt
      target?: anonymousNbt
   # MC: ClientboundEntityEventPacket
   # wiki.vg: Entity Event
   # Entity statuses generally trigger an animation for an entity. The available statuses vary by the entity's type (and are available to subclasses of that type as well).
   packet_entity_status:
      entityId: i32
      entityStatus: i8
   # MC: ClientboundEntityPositionSyncPacket
   # wiki.vg: Teleport Entity
   # Sent by the server when an entity moves more than 8 blocks.
   packet_sync_entity_position:
      entityId: varint
      x: f64
      y: f64
      z: f64
      dx: f64
      dy: f64
      dz: f64
      yaw: f32
      pitch: f32
      onGround: bool
   # MC: ClientboundExplodePacket
   # wiki.vg: Explosion
   # Sent when an explosion occurs (creepers, TNT, and ghast fireballs).
   packet_explosion:
      center: vec3f
      playerKnockback?: vec3f
      explosionParticle: Particle
      soundId: varint
      _: soundId ?
         if 0:
            soundName: string
            range?: f32
         default:
            
   # MC: ClientboundForgetLevelChunkPacket
   # wiki.vg: Unload Chunk
   # Tells the client to unload a chunk column.
   packet_unload_chunk:
      chunkZ: i32
      chunkX: i32
   # MC: ClientboundGameEventPacket
   # wiki.vg: Game Event
   # Used for a wide variety of game events, from weather to bed use to game mode to demo messages.
   packet_game_state_change:
      reason: u8
      gameMode: f32
   # MC: ClientboundHorseScreenOpenPacket
   # wiki.vg: Open Horse Screen
   # This packet is used exclusively for opening the horse GUI. Open Screen is used for all other GUIs.
   packet_open_horse_window:
      windowId: ContainerID
      nbSlots: varint
      entityId: i32
   # MC: ClientboundHurtAnimationPacket
   # wiki.vg: Hurt Animation
   # Plays a bobbing animation for the entity receiving damage.
   packet_hurt_animation:
      entityId: varint
      yaw: f32
   # MC: ClientboundInitializeBorderPacket
   # wiki.vg: Initialize World Border
   # Sent by the server to initialize the world border.
   packet_initialize_world_border:
      x: f64
      z: f64
      oldDiameter: f64
      newDiameter: f64
      speed: varint
      portalTeleportBoundary: varint
      warningBlocks: varint
      warningTime: varint
   # MC: ClientboundKeepAlivePacket
   # wiki.vg: Clientbound Keep Alive (play)
   # The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same payload (see Serverbound Keep Alive). If the client does not respond to a Keep Alive packet within 15 seconds after it was sent, the server kicks the client. Vice versa, if the server does not send any keep-alives for 20 seconds, the client will disconnect and yields a "Timed out" exception.
   packet_keep_alive:
      keepAliveId: i64
   # MC: ClientboundLevelChunkWithLightPacket
   # wiki.vg: Chunk Data and Update Light
   # Sent when a chunk comes into the client's view distance, specifying its terrain, lighting and block entities.
   packet_map_chunk:
      x: i32
      z: i32
      heightmaps: anonymousNbt
      chunkData: [
         "buffer",
         {
            "countType": "varint"
         }
      ]
      blockEntities: chunkBlockEntity[]varint
      skyLightMask: i64[]varint
      blockLightMask: i64[]varint
      emptySkyLightMask: i64[]varint
      emptyBlockLightMask: i64[]varint
      skyLight: []varint
         _: u8[]varint
      blockLight: []varint
         _: u8[]varint
   # MC: ClientboundLevelEventPacket
   # wiki.vg: World Event
   # Sent when a client is to play a sound or particle effect.
   packet_world_event:
      effectId: i32
      location: position
      data: i32
      global: bool
   # MC: ClientboundLevelParticlesPacket
   # wiki.vg: Particle
   # Sent by the server to display a particle effect.
   packet_world_particles:
      longDistance: bool
      alwaysShow: bool
      x: f64
      y: f64
      z: f64
      offsetX: f32
      offsetY: f32
      offsetZ: f32
      velocityOffset: f32
      amount: i32
      particle: Particle
   # MC: ClientboundLightUpdatePacket
   # wiki.vg: Update Light
   # Sent by the server to update the lighting of a chunk.
   packet_update_light:
      chunkX: varint
      chunkZ: varint
      skyLightMask: i64[]varint
      blockLightMask: i64[]varint
      emptySkyLightMask: i64[]varint
      emptyBlockLightMask: i64[]varint
      skyLight: []varint
         _: u8[]varint
      blockLight: []varint
         _: u8[]varint
   # MC: ClientboundLoginPacket
   # wiki.vg: Login (play)
   # Sent by the server to initialize the player's game state.
   packet_login:
      entityId: i32
      isHardcore: bool
      worldNames: string[]varint
      maxPlayers: varint
      viewDistance: varint
      simulationDistance: varint
      reducedDebugInfo: bool
      enableRespawnScreen: bool
      doLimitedCrafting: bool
      worldState: SpawnInfo
      enforcesSecureChat: bool
   # MC: ClientboundMapItemDataPacket
   # wiki.vg: Map Data
   # Sent by the server to update a map item.
   packet_map:
      itemDamage: varint
      scale: i8
      locked: bool
      icons?: []varint
         type: varint
         x: i8
         z: i8
         direction: u8
         displayName?: anonymousNbt
      columns: u8
      rows: columns ?
         if 0: void
         default: u8
      x: columns ?
         if 0: void
         default: u8
      y: columns ?
         if 0: void
         default: u8
      data: columns ?
         if 0: void
         default: [
            "buffer",
            {
               "countType": "varint"
            }
         ]
   # MC: ClientboundMerchantOffersPacket
   # wiki.vg: Merchant Offers
   # Sent by the server to update the trading offers of a villager.
   packet_trade_list:
      windowId: ContainerID
      ## https://github.com/extremeheat/extracted_minecraft_data/blob/client1.20.5/client/net/minecraft/world/item/trading/MerchantOffer.java#L210
      trades: []varint
         inputItem1:
            itemId: varint
            itemCount: varint
            addedComponentCount: varint
            components: SlotComponent[]$addedComponentCount
         outputItem: Slot
         inputItem2?:
            itemId: varint
            itemCount: varint
            addedComponentCount: varint
            components: SlotComponent[]$addedComponentCount
         tradeDisabled: bool
         nbTradeUses: i32
         maximumNbTradeUses: i32
         xp: i32
         specialPrice: i32
         priceMultiplier: f32
         demand: i32
      villagerLevel: varint
      experience: varint
      isRegularVillager: bool
      canRestock: bool
   # MC: ClientboundMoveEntityPacket.Pos
   # wiki.vg: Update Entity Position
   # Sent by the server when an entity moves.
   packet_rel_entity_move:
      entityId: varint
      dX: i16
      dY: i16
      dZ: i16
      onGround: bool
   # MC: ClientboundMoveEntityPacket.PosRot
   # wiki.vg: Update Entity Position and Rotation
   # Sent by the server when an entity moves and rotates.
   packet_entity_move_look:
      entityId: varint
      dX: i16
      dY: i16
      dZ: i16
      yaw: i8
      pitch: i8
      onGround: bool
   # MC: ClientboundMoveMinecartPacket
   # wiki.vg: Move Minecart Along Track
   # Sent by the server when a minecart moves along a track.
   packet_move_minecart:
      entityId: varint
      steps: []varint
         position: vec3f
         movement: vec3f
         yaw: f32
         pitch: f32
         weight: f32
   # MC: ClientboundMoveEntityPacket.Rot
   # wiki.vg: Update Entity Rotation
   # Sent by the server when an entity rotates.
   packet_entity_look:
      entityId: varint
      yaw: i8
      pitch: i8
      onGround: bool
   # MC: ClientboundMoveVehiclePacket
   # wiki.vg: Move Vehicle
   # Sent by the server when a vehicle moves.
   packet_vehicle_move:
      x: f64
      y: f64
      z: f64
      yaw: f32
      pitch: f32
   # MC: ClientboundOpenBookPacket
   # wiki.vg: Open Book
   # Sent by the server to open a book GUI.
   packet_open_book:
      hand: varint
   # MC: ClientboundOpenScreenPacket
   # wiki.vg: Open Screen
   # Sent by the server to open a GUI.
   packet_open_window:
      windowId: varint
      inventoryType: varint
      windowTitle: anonymousNbt
   # MC: ClientboundOpenSignEditorPacket
   # wiki.vg: Open Sign Editor
   # Sent by the server to open the sign editor GUI.
   packet_open_sign_entity:
      location: position
      isFrontText: bool
   # MC: ClientboundPingPacket
   # wiki.vg: Ping (play)
   # Packet is not used by the Notchian server. When sent to the client, client responds with a Pong packet with the same id.
   packet_ping:
      id: i32
   # MC: ClientboundPongResponsePacket
   # wiki.vg: Pong Response (play)
   # Sent by the server in response to a Ping Request packet. Contains the same timestamp as the Ping Request.
   packet_ping_response:
      id: i64
   # MC: ClientboundPlaceGhostRecipePacket
   # wiki.vg: Place Ghost Recipe
   # Sent by the server to place a ghost recipe in the crafting grid.
   packet_craft_recipe_response:
      windowId: ContainerID
      recipeDisplay: RecipeDisplay
   # MC: ClientboundPlayerAbilitiesPacket
   # wiki.vg: Player Abilities (clientbound)
   # Sent by the server to update the player's abilities.
   packet_abilities:
      flags: i8
      flyingSpeed: f32
      walkingSpeed: f32
   # MC: ClientboundPlayerChatPacket
   # wiki.vg: Player Chat Message
   # Sent by the server to send a chat message to the client.
   packet_player_chat:
      senderUuid: UUID
      index: varint
      signature?: [
         "buffer",
         {
            "count": 256
         }
      ]
      plainMessage: string
      timestamp: i64
      salt: i64
      previousMessages: previousMessages
      unsignedChatContent?: anonymousNbt
      filterType: varint
      filterTypeMask: filterType ?
         if 2: i64[]varint
         default: void
      type: ChatTypes
      networkName: anonymousNbt
      networkTargetName?: anonymousNbt
   # MC: ClientboundPlayerCombatEndPacket
   # wiki.vg: End Combat
   # Sent by the server to end a combat event.
   packet_end_combat_event:
      duration: varint
   # MC: ClientboundPlayerCombatEnterPacket
   # wiki.vg: Enter Combat
   # Sent by the server to start a combat event.
   packet_enter_combat_event:
      # Empty
   # MC: ClientboundPlayerCombatKillPacket
   # wiki.vg: Combat Death
   # Sent by the server to indicate that a player has died in combat.
   packet_death_combat_event:
      playerId: varint
      message: anonymousNbt
   # MC: ClientboundPlayerInfoRemovePacket
   # wiki.vg: Player Info Remove
   # Sent by the server to remove a player from the player list.
   packet_player_remove:
      players: UUID[]varint
   # MC: ClientboundPlayerInfoUpdatePacket
   # wiki.vg: Player Info Update
   # Sent by the server to update the player list.
   packet_player_info:
      action: ["bitflags", {
         "type": "u8",
         "flags": [
            "add_player",
            "initialize_chat",
            "update_game_mode",
            "update_listed",
            "update_latency",
            "update_display_name",
            "update_hat",
            "update_priority"
         ]
      }]
      data: []varint
         uuid: UUID
         player: ../action/add_player ?
            if true: game_profile
            default: void
         chatSession: ../action/initialize_chat ?
            if true: chat_session
            default: void
         gamemode: ../action/update_game_mode ?
            if true: varint
            default: void
         listed: ../action/update_listed ?
            if true: varint
            default: void
         latency: ../action/update_latency ?
            if true: varint
            default: void
         displayName: ../action/update_display_name ?
            if true: anonOptionalNbt
            default: void
         listPriority: ../action/update_priority ?
            if true: varint
            default: void
         showHat: ../action/update_hat ?
            if true: bool
            default: void

   # MC: ClientboundPlayerLookAtPacket
   # wiki.vg: Look At
   # Sent by the server to make the player look at a specific entity or position.
   packet_face_player:
      feet_eyes: varint
      x: f64
      y: f64
      z: f64
      isEntity: bool
      entityId: isEntity ?
         if true: varint
         default: void
      entity_feet_eyes: isEntity ?
         if true: varint
         default: void

   # https://github.com/extremeheat/extracted_minecraft_data/blob/client1.21.2/client/net/minecraft/world/entity/Relative.java#L82
   PositionUpdateRelatives: ["bitflags", {
      "type": "u32",
      "flags": ["x", "y", "z", "yaw", "pitch", "dx", "dy", "dz", "yawDelta"]
   }]
   # PositionUpdateRelatives: ["bitfield", [
   #    # unused bits on top
   #    { "name": "unused", "size": 23, "signed": false },
   #    { "name": "yawDelta", "size": 1, "signed": false },
   #    { "name": "dz", "size": 1, "signed": false },
   #    { "name": "dy", "size": 1, "signed": false },
   #    { "name": "dx", "size": 1, "signed": false },
   #    { "name": "pitch", "size": 1, "signed": false },
   #    { "name": "yaw", "size": 1, "signed": false },
   #    { "name": "z", "size": 1, "signed": false },
   #    { "name": "y", "size": 1, "signed": false },
   #    { "name": "x", "size": 1, "signed": false },
   # ]]
   # MC: ClientboundPlayerPositionPacket
   # wiki.vg: Synchronize Player Position
   # Sent by the server to synchronize the player's position.
   packet_position:
      teleportId: varint
      x: f64
      y: f64
      z: f64
      dx: f64
      dy: f64
      dz: f64
      yaw: f32
      pitch: f32
      flags: PositionUpdateRelatives
   # MC: ClientboundPlayerRotationPacket
   # wiki.vg: Player Rotation
   # Sent by the server to synchronize the player's rotation.
   packet_player_rotation:
      yaw: f32
      pitch: f32

   # MC: ClientboundRecipeBookAddPacket
   # wiki.vg: Recipe Book Add
   # Sent by the server to add a recipe to the client's recipe book.
   packet_recipe_book_add:
      entries: []varint
         # RecipeDisplayEntry
         recipe:
            displayId: varint
            display: RecipeDisplay
            group: optvarint
            # This ID corresponds to the "recipe_book_category" registry
            category: varint =>
            - crafting_building_blocks
            - crafting_redstone
            - crafting_equipment
            - crafting_misc
            - furnace_food
            - furnace_blocks
            - furnace_misc
            - blast_furnace_blocks
            - blast_furnace_misc
            - smoker_food
            - stonecutter
            - smithing
            - campfire
            craftingRequirements?: IDSet[]varint
         flags: ["bitflags", {
            "type": "u8",
            "flags": ["notification", "highlight"]
         }]
      replace: bool
   # MC: ClientboundRecipeBookRemovePacket
   # wiki.vg: Recipe Book Remove
   # Sent by the server to remove a recipe from the client's recipe book.
   packet_recipe_book_remove:
      recipeIds: varint[]varint
   # MC: ClientboundRecipeBookSettingsPacket
   # wiki.vg: Recipe Book Settings
   # Sent by the server to update the client's recipe book settings.
   packet_recipe_book_settings:
      craftingGuiOpen: bool
      craftingFilteringCraftable: bool
      smeltingGuiOpen: bool
      smeltingFilteringCraftable: bool
      blastGuiOpen: bool
      blastFilteringCraftable: bool
      smokerGuiOpen: bool
      smokerFilteringCraftable: bool
   # MC: ClientboundRemoveEntitiesPacket
   # wiki.vg: Remove Entities
   # Sent by the server to remove entities from the client's world.
   packet_entity_destroy:
      entityIds: varint[]varint
   # MC: ClientboundRemoveMobEffectPacket
   # wiki.vg: Remove Entity Effect
   # Sent by the server to remove a mob effect from an entity.
   packet_remove_entity_effect:
      entityId: varint
      effectId: varint
   # MC: ClientboundResetScorePacket
   # wiki.vg: Reset Score
   # Sent by the server to reset a scoreboard objective.
   packet_reset_score:
      entity_name: string
      objective_name?: string
   # MC: ClientboundRespawnPacket
   # wiki.vg: Respawn
   # Sent by the server to respawn the player.
   packet_respawn:
      worldState: SpawnInfo
      # Bit field: 0b1 - KEEP_ATTRIBUTE_MODIFIERS, 0b10 - KEEP_ENTITY_DATA
      copyMetadata: u8
   # MC: ClientboundRotateHeadPacket
   # wiki.vg: Set Head Rotation
   # Sent by the server to rotate an entity's head.
   packet_entity_head_rotation:
      entityId: varint
      headYaw: i8
   # MC: ClientboundSectionBlocksUpdatePacket
   # wiki.vg: Update Section Blocks
   # Sent by the server to update the blocks in a chunk section.
   packet_multi_block_change:
      chunkCoordinates: [ "bitfield", [
         { "name": "x", "size": 22, "signed": true },
         { "name": "z", "size": 22, "signed": true },
         { "name": "y", "size": 20, "signed": true }
      ]]
      records: varint[]varint
   # MC: ClientboundSelectAdvancementsTabPacket
   # wiki.vg: Select Advancements Tab
   # Sent by the server to select an advancements tab.
   packet_select_advancement_tab:
      id?: string
   # MC: ClientboundServerDataPacket
   # wiki.vg: Server Data
   # Sent by the server to update the server's MOTD and icon.
   packet_server_data:
      motd: anonymousNbt
      iconBytes?: ByteArray
   # MC: ClientboundSetActionBarTextPacket
   # wiki.vg: Set Action Bar Text
   # Sent by the server to display text in the action bar.
   packet_action_bar:
      text: anonymousNbt
   # MC: ClientboundSetBorderCenterPacket
   # wiki.vg: Set Border Center
   # Sent by the server to set the center of the world border.
   packet_world_border_center:
      x: f64
      z: f64
   # MC: ClientboundSetBorderLerpSizePacket
   # wiki.vg: Set Border Lerp Size
   # Sent by the server to set the size of the world border.
   packet_world_border_lerp_size:
      oldDiameter: f64
      newDiameter: f64
      speed: varint
   # MC: ClientboundSetBorderSizePacket
   # wiki.vg: Set Border Size
   # Sent by the server to set the size of the world border.
   packet_world_border_size:
      diameter: f64
   # MC: ClientboundSetBorderWarningDelayPacket
   # wiki.vg: Set Border Warning Delay
   # Sent by the server to set the warning delay for the world border.
   packet_world_border_warning_delay:
      warningTime: varint
   # MC: ClientboundSetBorderWarningDistancePacket
   # wiki.vg: Set Border Warning Distance
   # Sent by the server to set the warning distance for the world border.
   packet_world_border_warning_reach:
      warningBlocks: varint
   # MC: ClientboundSetCameraPacket
   # wiki.vg: Set Camera
   # Sent by the server to set the camera entity.
   packet_camera:
      cameraId: varint
   # MC: ClientboundSetChunkCacheCenterPacket
   # wiki.vg: Set Center Chunk
   # Sent by the server to set the center chunk for the client's chunk cache.
   packet_update_view_position:
      chunkX: varint
      chunkZ: varint
   # MC: ClientboundSetChunkCacheRadiusPacket
   # wiki.vg: Set Render Distance
   # Sent by the server to set the render distance.
   packet_update_view_distance:
      viewDistance: varint
   # MC: ClientboundSetCursorItemPacket
   # wiki.vg: Set Cursor Item
   # Sent by the server to set the item in the cursor slot.
   packet_set_cursor_item:
      contents?: Slot
   # MC: ClientboundSetDefaultSpawnPositionPacket
   # wiki.vg: Set Default Spawn Position
   # Sent by the server to set the default spawn position.
   packet_spawn_position:
      location: position
      angle: f32
   # MC: ClientboundSetDisplayObjectivePacket
   # wiki.vg: Display Objective
   # Sent by the server to display a scoreboard objective.
   packet_scoreboard_display_objective:
      position: varint
      name: string
   # MC: ClientboundSetEntityDataPacket
   # wiki.vg: Set Entity Metadata
   # Sent by the server to update an entity's metadata.
   packet_entity_metadata:
      entityId: varint
      metadata: entityMetadata
   # MC: ClientboundSetEntityLinkPacket
   # wiki.vg: Link Entities
   # Sent by the server to link two entities.
   packet_attach_entity:
      entityId: i32
      vehicleId: i32
   # MC: ClientboundSetEntityMotionPacket
   # wiki.vg: Set Entity Velocity
   # Sent by the server to set an entity's velocity.
   packet_entity_velocity:
      entityId: varint
      velocityX: i16
      velocityY: i16
      velocityZ: i16
   # MC: ClientboundSetEquipmentPacket
   # wiki.vg: Set Equipment
   # Sent by the server to set an entity's equipment.
   packet_entity_equipment:
      entityId: varint
      equipments: [
         "topBitSetTerminatedArray",
         {
            "type": [
               "container",
               [
                  {
                     "name": "slot",
                     "type": "i8"
                  },
                  {
                     "name": "item",
                     "type": "Slot"
                  }
               ]
            ]
         }
      ]
   # MC: ClientboundSetExperiencePacket
   # wiki.vg: Set Experience
   # Sent by the server to set the player's experience.
   packet_experience:
      experienceBar: f32
      level: varint
      totalExperience: varint
   # MC: ClientboundSetHealthPacket
   # wiki.vg: Set Health
   # Sent by the server to set the player's health.
   packet_update_health:
      health: f32
      food: varint
      foodSaturation: f32
   # MC: ClientboundSetHeldSlotPacket
   # wiki.vg: Set Held Item (clientbound)
   # Sent by the server to set the player's held item.
   packet_held_item_slot:
      slot: varint
   # MC: ClientboundSetObjectivePacket
   # wiki.vg: Update Objectives
   # Sent by the server to update a scoreboard objective.
   packet_scoreboard_objective:
      name: string
      action: i8
      displayText: action ?
         if 0: anonymousNbt
         if 2: anonymousNbt
         default: void
      type: action ?
         if 0: varint
         if 2: varint
         default: void
      number_format: action ?
         if 0: [
            "option",
            "varint"
         ]
         if 2: [
            "option",
            "varint"
         ]
         default: void
      styling: action ?
         if 0: number_format ?
            if 1: anonymousNbt
            if 2: anonymousNbt
            default: void
         if 2: number_format ?
            if 1: anonymousNbt
            if 2: anonymousNbt
            default: void
         default: void
   # MC: ClientboundSetPassengersPacket
   # wiki.vg: Set Passengers
   # Sent by the server to set the passengers of an entity.
   packet_set_passengers:
      entityId: varint
      passengers: varint[]varint
   # MC: ClientboundSetPlayerInventoryPacket
   # wiki.vg: Set Player Inventory Slot
   # Sent by the server to set the player's inventory slot.
   packet_set_player_inventory:
      slotId: varint
      contents?: Slot
   # MC: ClientboundSetPlayerTeamPacket
   # wiki.vg: Update Teams
   # Sent by the server to update a team.
   packet_teams:
      team: string
      mode: i8
      name: mode ?
         if 0: anonymousNbt
         if 2: anonymousNbt
         default: void
      friendlyFire: mode ?
         if 0: i8
         if 2: i8
         default: void
      nameTagVisibility: mode ?
         if 0: string
         if 2: string
         default: void
      collisionRule: mode ?
         if 0: string
         if 2: string
         default: void
      formatting: mode ?
         if 0: varint
         if 2: varint
         default: void
      prefix: mode ?
         if 0: anonymousNbt
         if 2: anonymousNbt
         default: void
      suffix: mode ?
         if 0: anonymousNbt
         if 2: anonymousNbt
         default: void
      players: mode ?
         if 0: string[]varint
         if 3: string[]varint
         if 4: string[]varint
         default: void
   # MC: ClientboundSetScorePacket
   # wiki.vg: Update Score
   # Sent by the server to update a scoreboard score.
   packet_scoreboard_score:
      itemName: string
      scoreName: string
      value: varint
      display_name?: anonymousNbt
      number_format?: varint
      styling: number_format ?
         if 1: anonymousNbt
         if 2: anonymousNbt
         default: void
   # MC: ClientboundSetSimulationDistancePacket
   # wiki.vg: Set Simulation Distance
   # Sent by the server to set the simulation distance.
   packet_simulation_distance:
      distance: varint
   # MC: ClientboundSetSubtitleTextPacket
   # wiki.vg: Set Subtitle Text
   # Sent by the server to set the subtitle text.
   packet_set_title_subtitle:
      text: anonymousNbt
   # MC: ClientboundSetTimePacket
   # wiki.vg: Update Time
   # Sent by the server to update the world time.
   packet_update_time:
      age: i64
      time: i64
      tickDayTime: bool
   # MC: ClientboundSetTitleTextPacket
   # wiki.vg: Set Title Text
   # Sent by the server to set the title text.
   packet_set_title_text:
      text: anonymousNbt
   # MC: ClientboundSetTitlesAnimationPacket
   # wiki.vg: Set Title Animation Times
   # Sent by the server to set the title animation times.
   packet_set_title_time:
      fadeIn: i32
      stay: i32
      fadeOut: i32
   # MC: ClientboundSoundEntityPacket
   # wiki.vg: Entity Sound Effect
   # Sent by the server to play a sound effect from an entity.
   packet_entity_sound_effect:
      soundId: varint
      soundEvent: soundId ?
         if 0:
            resource: string
            range?: f32
         default: void
      soundCategory: soundSource
      entityId: varint
      volume: f32
      pitch: f32
      seed: i64
   # MC: ClientboundSoundPacket
   # wiki.vg: Sound Effect
   # Sent by the server to play a sound effect.
   packet_sound_effect:
      soundId: varint
      soundEvent: soundId ?
         if 0:
            resource: string
            range?: f32
         default: void
      soundCategory: soundSource
      x: i32
      y: i32
      z: i32
      volume: f32
      pitch: f32
      seed: i64
   # MC: ClientboundStartConfigurationPacket
   # wiki.vg: Start Configuration
   # Sent by the server to start the configuration process.
   packet_start_configuration:
      # Empty
   # MC: ClientboundStopSoundPacket
   # wiki.vg: Stop Sound
   # Sent by the server to stop a sound effect.
   packet_stop_sound:
      flags: i8
      source: flags ?
         if 1: varint
         if 3: varint
         default: void
      sound: flags ?
         if 2: string
         if 3: string
         default: void
   ## (Store Cookie is Common)
   # MC: ClientboundSystemChatPacket
   # wiki.vg: System Chat Message
   # Sent by the server to send a system chat message to the client.
   packet_system_chat:
      content: anonymousNbt
      isActionBar: bool
   # MC: ClientboundTabListPacket
   # wiki.vg: Set Tab List Header And Footer
   # Sent by the server to set the header and footer of the tab list.
   packet_playerlist_header:
      header: anonymousNbt
      footer: anonymousNbt
   # MC: ClientboundTagQueryPacket
   # wiki.vg: Tag Query Response
   # Sent by the server to respond to a tag query.
   packet_nbt_query_response:
      transactionId: varint
      nbt: anonOptionalNbt
   # MC: ClientboundTakeItemEntityPacket
   # wiki.vg: Pickup Item
   # Sent by the server to indicate that an item has been picked up by an entity.
   packet_collect:
      collectedEntityId: varint
      collectorEntityId: varint
      pickupItemCount: varint
   # MC: ClientboundTeleportEntityPacket
   # wiki.vg: Synchronize Vehicle Position
   # Sent by the server to synchronize the position of a vehicle.
   packet_entity_teleport:
      entityId: varint
      x: f64
      y: f64
      z: f64
      yaw: i8
      pitch: i8
      onGround: bool
   # MC: ClientboundTickingStatePacket
   # wiki.vg: Set Ticking State
   # Sent by the server to set the ticking state of the world.
   packet_set_ticking_state:
      tick_rate: f32
      is_frozen: bool
   # MC: ClientboundTickingStepPacket
   # wiki.vg: Step Tick
   # Sent by the server to step the world's ticks.
   packet_step_tick:
      tick_steps: varint
   ## (Transfer is common)
   # MC: ClientboundUpdateAdvancementsPacket
   # wiki.vg: Update Advancements
   # Sent by the server to update the client's advancements.
   packet_advancements:
      reset: bool
      advancementMapping: []varint
         key: string
         value:
            parentId?: string
            displayData?:
               title: anonymousNbt
               description: anonymousNbt
               icon: Slot
               frameType: varint
               flags: ["bitfield", [
                  { "name": "unused", "size": 29, "signed": false },
                  { "name": "hidden", "size": 1, "signed": false },
                  { "name": "show_toast", "size": 1, "signed": false },
                  { "name": "has_background_texture", "size": 1, "signed": false }
               ]]
               backgroundTexture: flags/has_background_texture ?
                  if 1: string
                  default: void
               xCord: f32
               yCord: f32
            requirements: []varint
               _: string[]varint
            sendsTelemtryData: bool
      identifiers: string[]varint
      progressMapping: []varint
         key: string
         value: []varint
            criterionIdentifier: string
            criterionProgress?: i64
   # MC: ClientboundUpdateAttributesPacket
   # wiki.vg: Update Attributes
   # Sent by the server to update an entity's attributes.
   packet_entity_update_attributes:
      entityId: varint
      properties: []varint
         key: varint =>
         - generic.armor
         - generic.armor_toughness
         - generic.attack_damage
         - generic.attack_knockback
         - generic.attack_speed
         - player.block_break_speed
         - player.block_interaction_range
         - player.entity_interaction_range
         - generic.fall_damage_multiplier
         - generic.flying_speed
         - generic.follow_range
         - generic.gravity
         - generic.jump_strength
         - generic.knockback_resistance
         - generic.luck
         - generic.max_absorption
         - generic.max_health
         - generic.movement_speed
         - generic.safe_fall_distance
         - generic.scale
         - zombie.spawn_reinforcements
         - generic.step_height
         value: f64
         modifiers: []varint
            uuid: string
            amount: f64
            operation: i8
   # MC: ClientboundUpdateMobEffectPacket
   # wiki.vg: Entity Effect
   # Sent by the server to update a mob effect on an entity.
   packet_entity_effect:
      entityId: varint
      effectId: varint
      amplifier: varint
      duration: varint
      # a bitfield of 0x01 for ambient, 0x02 for show particles
      # flags: ["bitfield", [
      #    { "name": "unused", "size": 4 },
      #    { "name": "ambient", "size": 1 },
      #    { "name": "showParticles", "size": 1 },
      #    { "name": "showIcon", "size": 1 },
      #    { "name": "blend", "size": 1 }
      # ]]
      flags: u8
   # MC: ClientboundUpdateRecipesPacket
   # wiki.vg: Update Recipes
   # Sent by the server to update the client's recipes.
   packet_declare_recipes:
      recipes: []varint
         name: string
         items: varint[]varint
      stoneCutterRecipes: []varint
         input: IDSet
         slotDisplay: SlotDisplay

   # MC: ClientboundUpdateTagsPacket
   # wiki.vg: Update Tags (play)
   # Sent by the server to update the client's tags.
   packet_tags:
      tags: []varint
         tagType: string
         tags: tags
   # MC: ClientboundProjectilePowerPacket
   # wiki.vg: Projectile Power
   # Sent by the server to set the power of a projectile.
   packet_set_projectile_power:
      id: varint
      accelerationPower: f64
   ## (ClientboundCustomReportDetailsPacket, ClientboundServerLinksPacket is common)

   packet:
      name: varint =>
      - bundle_delimiter
      - spawn_entity
      - spawn_entity_experience_orb
      - animation
      - statistics
      - acknowledge_player_digging
      - block_break_animation
      - tile_entity_data
      - block_action
      - block_change
      - boss_bar
      - difficulty
      - chunk_batch_finished
      - chunk_batch_start
      - chunk_biomes
      - clear_titles
      - tab_complete
      - declare_commands
      - close_window
      - window_items
      - craft_progress_bar
      - set_slot
      - cookie_request
      - set_cooldown
      - chat_suggestions
      - custom_payload
      - damage_event
      - debug_sample
      - hide_message
      - kick_disconnect
      - profileless_chat
      - entity_status
      - sync_entity_position
      - explosion
      - unload_chunk
      - game_state_change
      - open_horse_window
      - hurt_animation
      - initialize_world_border
      - keep_alive
      - map_chunk
      - world_event
      - world_particles
      - update_light
      - login
      - map
      - trade_list
      - rel_entity_move
      - entity_move_look
      - move_minecart
      - entity_look
      - vehicle_move
      - open_book
      - open_window
      - open_sign_entity
      - ping
      - ping_response
      - craft_recipe_response
      - abilities
      - player_chat
      - end_combat_event
      - enter_combat_event
      - death_combat_event
      - player_remove
      - player_info
      - face_player
      - position
      - player_rotation
      - recipe_book_add
      - recipe_book_remove
      - recipe_book_settings
      - entity_destroy
      - remove_entity_effect
      - reset_score
      - remove_resource_pack
      - add_resource_pack
      - respawn
      - entity_head_rotation
      - multi_block_change
      - select_advancement_tab
      - server_data
      - action_bar
      - world_border_center
      - world_border_lerp_size
      - world_border_size
      - world_border_warning_delay
      - world_border_warning_reach
      - camera
      - update_view_position
      - update_view_distance
      - set_cursor_item
      - held_item_slot
      - spawn_position
      - scoreboard_display_objective
      - entity_metadata
      - attach_entity
      - entity_velocity
      - entity_equipment
      - experience
      - update_health
      - scoreboard_objective
      - set_passengers
      - set_player_inventory
      - teams
      - scoreboard_score
      - simulation_distance
      - set_title_subtitle
      - update_time
      - set_title_text
      - set_title_time
      - entity_sound_effect
      - sound_effect
      - start_configuration
      - stop_sound
      - store_cookie
      - system_chat
      - playerlist_header
      - nbt_query_response
      - collect
      - entity_teleport
      - set_ticking_state
      - step_tick
      - transfer
      - advancements
      - entity_update_attributes
      - entity_effect
      - declare_recipes
      - tags
      - set_projectile_power
      - custom_report_details
      - server_links
      params: name ?
         if bundle_delimiter: void
         if spawn_entity: packet_spawn_entity
         if spawn_entity_experience_orb: packet_spawn_entity_experience_orb
         if animation: packet_animation
         if statistics: packet_statistics
         if acknowledge_player_digging: packet_acknowledge_player_digging
         if block_break_animation: packet_block_break_animation
         if tile_entity_data: packet_tile_entity_data
         if block_action: packet_block_action
         if block_change: packet_block_change
         if boss_bar: packet_boss_bar
         if difficulty: packet_difficulty
         if chunk_batch_finished: packet_chunk_batch_finished
         if chunk_batch_start: packet_chunk_batch_start
         if chunk_biomes: packet_chunk_biomes
         if clear_titles: packet_clear_titles
         if tab_complete: packet_tab_complete
         if declare_commands: packet_declare_commands
         if close_window: packet_close_window
         if window_items: packet_window_items
         if craft_progress_bar: packet_craft_progress_bar
         if set_slot: packet_set_slot
         if cookie_request: packet_common_cookie_request
         if set_cooldown: packet_set_cooldown
         if chat_suggestions: packet_chat_suggestions
         if custom_payload: packet_custom_payload
         if damage_event: packet_damage_event
         if debug_sample: packet_debug_sample
         if hide_message: packet_hide_message
         if kick_disconnect: packet_kick_disconnect
         if profileless_chat: packet_profileless_chat
         if entity_status: packet_entity_status
         if sync_entity_position: packet_sync_entity_position
         if explosion: packet_explosion
         if unload_chunk: packet_unload_chunk
         if game_state_change: packet_game_state_change
         if open_horse_window: packet_open_horse_window
         if hurt_animation: packet_hurt_animation
         if initialize_world_border: packet_initialize_world_border
         if keep_alive: packet_keep_alive
         if map_chunk: packet_map_chunk
         if world_event: packet_world_event
         if world_particles: packet_world_particles
         if update_light: packet_update_light
         if login: packet_login
         if map: packet_map
         if trade_list: packet_trade_list
         if rel_entity_move: packet_rel_entity_move
         if entity_move_look: packet_entity_move_look
         if move_minecart: packet_move_minecart
         if entity_look: packet_entity_look
         if vehicle_move: packet_vehicle_move
         if open_book: packet_open_book
         if open_window: packet_open_window
         if open_sign_entity: packet_open_sign_entity
         if ping: packet_ping
         if ping_response: packet_ping_response
         if craft_recipe_response: packet_craft_recipe_response
         if abilities: packet_abilities
         if player_chat: packet_player_chat
         if end_combat_event: packet_end_combat_event
         if enter_combat_event: packet_enter_combat_event
         if death_combat_event: packet_death_combat_event
         if player_remove: packet_player_remove
         if player_info: packet_player_info
         if face_player: packet_face_player
         if position: packet_position
         if player_rotation: packet_player_rotation
         if recipe_book_add: packet_recipe_book_add
         if recipe_book_remove: packet_recipe_book_remove
         if recipe_book_settings: packet_recipe_book_settings
         if entity_destroy: packet_entity_destroy
         if remove_entity_effect: packet_remove_entity_effect
         if reset_score: packet_reset_score
         if remove_resource_pack: packet_common_remove_resource_pack
         if add_resource_pack: packet_common_add_resource_pack
         if respawn: packet_respawn
         if entity_head_rotation: packet_entity_head_rotation
         if multi_block_change: packet_multi_block_change
         if select_advancement_tab: packet_select_advancement_tab
         if server_data: packet_server_data
         if action_bar: packet_action_bar
         if world_border_center: packet_world_border_center
         if world_border_lerp_size: packet_world_border_lerp_size
         if world_border_size: packet_world_border_size
         if world_border_warning_delay: packet_world_border_warning_delay
         if world_border_warning_reach: packet_world_border_warning_reach
         if camera: packet_camera
         if update_view_position: packet_update_view_position
         if update_view_distance: packet_update_view_distance
         if set_cursor_item: packet_set_cursor_item
         if held_item_slot: packet_held_item_slot
         if spawn_position: packet_spawn_position
         if scoreboard_display_objective: packet_scoreboard_display_objective
         if entity_metadata: packet_entity_metadata
         if attach_entity: packet_attach_entity
         if entity_velocity: packet_entity_velocity
         if entity_equipment: packet_entity_equipment
         if experience: packet_experience
         if update_health: packet_update_health
         if scoreboard_objective: packet_scoreboard_objective
         if set_passengers: packet_set_passengers
         if set_player_inventory: packet_set_player_inventory
         if teams: packet_teams
         if scoreboard_score: packet_scoreboard_score
         if simulation_distance: packet_simulation_distance
         if set_title_subtitle: packet_set_title_subtitle
         if update_time: packet_update_time
         if set_title_text: packet_set_title_text
         if set_title_time: packet_set_title_time
         if entity_sound_effect: packet_entity_sound_effect
         if sound_effect: packet_sound_effect
         if start_configuration: packet_start_configuration
         if stop_sound: packet_stop_sound
         if store_cookie: packet_common_store_cookie
         if system_chat: packet_system_chat
         if playerlist_header: packet_playerlist_header
         if nbt_query_response: packet_nbt_query_response
         if collect: packet_collect
         if entity_teleport: packet_entity_teleport
         if set_ticking_state: packet_set_ticking_state
         if step_tick: packet_step_tick
         if transfer: packet_common_transfer
         if advancements: packet_advancements
         if entity_update_attributes: packet_entity_update_attributes
         if entity_effect: packet_entity_effect
         if declare_recipes: packet_declare_recipes
         if tags: packet_tags
         if set_projectile_power: packet_set_projectile_power
         if custom_report_details: packet_common_custom_report_details
         if server_links: packet_common_server_links

^play.toServer.types:
   # MC: ServerboundAcceptTeleportationPacket
   # wiki.vg: Confirm Teleportation
   # Sent by the client to confirm a teleportation.
   packet_teleport_confirm:
      teleportId: varint
   # MC: ServerboundBlockEntityTagQueryPacket
   # wiki.vg: Query Block Entity Tag
   # Sent by the client to query the tag of a block entity.
   packet_query_block_nbt:
      transactionId: varint
      location: position
   # MC: ServerboundSelectBundleItemPacket
   # wiki.vg: Bundle Item Selected
   # Sent by the client to select an item from a bundle.
   packet_select_bundle_item:
      slotId: varint
      selectedItemIndex: varint
   # MC: ServerboundChangeDifficultyPacket
   # wiki.vg: Change Difficulty
   # Sent by the client to change the difficulty.
   packet_set_difficulty:
      newDifficulty: u8
   # MC: ServerboundChatAckPacket
   # wiki.vg: Acknowledge Message
   # Sent by the client to acknowledge a chat message.
   packet_message_acknowledgement:
      count: varint
   # MC: ServerboundChatCommandPacket
   # wiki.vg: Chat Command
   # Sent by the client to send a chat command.
   packet_chat_command:
      command: string
   # MC: ServerboundChatCommandSignedPacket
   # wiki.vg: Signed Chat Command
   # Sent by the client to send a signed chat command.
   packet_chat_command_signed:
      command: string
      timestamp: i64
      salt: i64
      argumentSignatures: []varint
         argumentName: string
         signature: [
            "buffer",
            {
               "count": 256
            }
         ]
      messageCount: varint
      acknowledged: [
         "buffer",
         {
            "count": 3
         }
      ]
   # MC: ServerboundChatPacket
   # wiki.vg: Chat Message
   # Sent by the client to send a chat message.
   packet_chat_message:
      message: string
      timestamp: i64
      salt: i64
      signature?: [
         "buffer",
         {
            "count": 256
         }
      ]
      offset: varint
      acknowledged: [
         "buffer",
         {
            "count": 3
         }
      ]
   # MC: ServerboundChatSessionUpdatePacket
   # wiki.vg: Player Session
   # Sent by the client to update the player's session.
   packet_chat_session_update:
      sessionUUID: UUID
      expireTime: i64
      publicKey: ByteArray
      signature: ByteArray
   # MC: ServerboundChunkBatchReceivedPacket
   # wiki.vg: Chunk Batch Received
   # Sent by the client to acknowledge the receipt of a chunk batch.
   packet_chunk_batch_received:
      chunksPerTick: f32
   # MC: ServerboundClientCommandPacket
   # wiki.vg: Client Status
   # Sent by the client to indicate a client status.
   packet_client_command:
      actionId: varint
   # MC: ServerboundClientTickEndPacket
   # wiki.vg: Client Tick End
   # Sent by the client to indicate the end of a client tick.
   packet_tick_end:
      # Empty
   # MC: ServerboundClientInformationPacket
   # wiki.vg: Client Information (play)
   # Sent by the client to update the client's information.
   packet_settings:
      locale: string
      viewDistance: i8
      chatFlags: varint
      chatColors: bool
      skinParts: u8
      mainHand: varint
      enableTextFiltering: bool
      enableServerListing: bool
      particleStatus: varint =>
      - all
      - decreased
      - minimal
   # MC: ServerboundCommandSuggestionPacket
   # wiki.vg: Command Suggestions Request
   # Sent by the client to request command suggestions.
   packet_tab_complete:
      transactionId: varint
      text: string
   # MC: ServerboundConfigurationAcknowledgedPacket
   # wiki.vg: Acknowledge Configuration
   # Sent by the client to acknowledge the configuration process.
   packet_configuration_acknowledged:
      # Empty
   # MC: ServerboundContainerButtonClickPacket
   # wiki.vg: Click Container Button
   # Sent by the client to click a button in a container.
   packet_enchant_item:
      windowId: ContainerID
      enchantment: i8
   # MC: ServerboundContainerClickPacket
   # wiki.vg: Click Container
   # Sent by the client to click a slot in a container.
   packet_window_click:
      windowId: ContainerID
      stateId: varint
      slot: i16
      mouseButton: i8
      mode: varint
      changedSlots: []varint
         location: i16
         item: Slot
      cursorItem: Slot
   # MC: ServerboundContainerClosePacket
   # wiki.vg: Close Container
   # Sent by the client to close a container.
   packet_close_window:
      windowId: ContainerID
   # MC: ServerboundContainerSlotStateChangedPacket
   # wiki.vg: Change Container Slot State
   # Sent by the client to change the state of a container slot.
   packet_set_slot_state:
      slot_id: varint
      window_id: ContainerID
      state: bool
   ## (ServerboundCookieResponsePacket is common)
   # MC: ServerboundCustomPayloadPacket
   # wiki.vg: Serverbound Plugin Message (play)
   # Mods and plugins can use this to send their data. Minecraft itself uses some plugin channels. These internal channels are in the minecraft namespace.
   packet_custom_payload:
      channel: string
      data: restBuffer
   # MC: ServerboundDebugSampleSubscriptionPacket
   # wiki.vg: Debug Sample Subscription
   # Sent by the client to subscribe to debug samples.
   packet_debug_sample_subscription:
      type: varint
   # MC: ServerboundEditBookPacket
   # wiki.vg: Edit Book
   # Sent by the client to edit a book.
   packet_edit_book:
      hand: varint
      pages: string[]varint
      title?: string
   # MC: ServerboundEntityTagQuery
   # wiki.vg: Query Entity Tag
   # Sent by the client to query the tag of an entity.
   packet_query_entity_nbt:
      transactionId: varint
      entityId: varint
   # MC: ServerboundInteractPacket
   # wiki.vg: Interact
   # Sent by the client to interact with an entity.
   packet_use_entity:
      target: varint
      mouse: varint
      x: mouse ?
         if 2: f32
         default: void
      y: mouse ?
         if 2: f32
         default: void
      z: mouse ?
         if 2: f32
         default: void
      hand: mouse ?
         if 0: varint
         if 2: varint
         default: void
      sneaking: bool
   # MC: ServerboundJigsawGeneratePacket
   # wiki.vg: Jigsaw Generate
   # Sent by the client to generate a jigsaw structure.
   packet_generate_structure:
      location: position
      levels: varint
      keepJigsaws: bool
   # MC: ServerboundKeepAlivePacket
   # wiki.vg: Serverbound Keep Alive (play)
   # Sent by the client to respond to a keep-alive packet.
   packet_keep_alive:
      keepAliveId: i64
   # MC: ServerboundLockDifficultyPacket
   # wiki.vg: Lock Difficulty
   # Sent by the client to lock the difficulty.
   packet_lock_difficulty:
      locked: bool

   MovementFlags: ["bitflags", {
      "type": "u8",
      "flags": ["onGround", "hasHorizontalCollision"]
   }]
   # MC: ServerboundMovePlayerPacket.Pos
   # wiki.vg: Set Player Position
   # Sent by the client to set the player's position.
   packet_position:
      x: f64
      y: f64
      z: f64
      flags: MovementFlags
   # MC: ServerboundMovePlayerPacket.PosRot
   # wiki.vg: Set Player Position and Rotation
   # Sent by the client to set the player's position and rotation.
   packet_position_look:
      x: f64
      y: f64
      z: f64
      yaw: f32
      pitch: f32
      flags: MovementFlags
   # MC: ServerboundMovePlayerPacket.Rot
   # wiki.vg: Set Player Rotation
   # Sent by the client to set the player's rotation.
   packet_look:
      yaw: f32
      pitch: f32
      flags: MovementFlags
   # MC: ServerboundMovePlayerPacket.StatusOnly
   # wiki.vg: Set Player Movement Flags
   # Sent by the client to set the player's movement flags.
   packet_flying:
      flags: MovementFlags
   # MC: ServerboundMoveVehiclePacket
   # wiki.vg: Move Vehicle
   # Sent by the client to move a vehicle.
   packet_vehicle_move:
      x: f64
      y: f64
      z: f64
      yaw: f32
      pitch: f32
      onGround: bool
   # MC: ServerboundPaddleBoatPacket
   # wiki.vg: Paddle Boat
   # Sent by the client to paddle a boat.
   packet_steer_boat:
      leftPaddle: bool
      rightPaddle: bool
   # MC: ServerboundPickItemFromBlockPacket
   # wiki.vg: Pick Item From Block
   # Sent by the client to pick an item from a block.
   packet_pick_item_from_block:
      position: position
      includeData: bool
   # MC: ServerboundPickItemFromEntityPacket
   # wiki.vg: Pick Item From Entity
   # Sent by the client to pick an item from an entity.
   packet_pick_item_from_entity:
      entityId: varint
      includeData: bool
   # MC: ServerboundPingRequestPacket
   # wiki.vg: Ping Request (play)
   # Sent by the client to measure the latency to the server.
   packet_ping_request:
      id: i64
   # MC: ServerboundPlaceRecipePacket
   # wiki.vg: Place Recipe
   # Sent by the client to place a recipe in the crafting grid.
   packet_craft_recipe_request:
      windowId: ContainerID
      recipeId: varint
      makeAll: bool
   # MC: ServerboundPlayerAbilitiesPacket
   # wiki.vg: Player Abilities (serverbound)
   # Sent by the client to update the player's abilities.
   packet_abilities:
      flags: i8
   # MC: ServerboundPlayerActionPacket
   # wiki.vg: Player Action
   # Sent by the client to perform a player action.
   packet_block_dig:
      status: varint
      location: position
      face: i8
      sequence: varint
   # MC: ServerboundPlayerCommandPacket
   # wiki.vg: Player Command
   # Sent by the client to perform a player command.
   packet_entity_action:
      entityId: varint
      actionId: varint
      jumpBoost: varint
   # MC: ServerboundPlayerInputPacket
   # wiki.vg: Player Input
   # Sent by the client to update the player's input.
   packet_player_input:
      ## client/net/minecraft/world/entity/player/Input.java
      inputs: ["bitflags", {
         "type": "u8",
         "flags": ["forward", "backward", "left", "right", "jump", "shift", "sprint"]
      }]
   # MC: ServerboundPlayerLoadedPacket
   # wiki.vg: Player Loaded
   # Sent by the client to indicate that the player has loaded.
   packet_player_loaded:
      # Empty
   # MC: ServerboundPongPacket
   # wiki.vg: Pong (play)
   # Sent by the client to respond to a ping request.
   packet_pong:
      id: i32
   # MC: ServerboundRecipeBookChangeSettingsPacket
   # wiki.vg: Change Recipe Book Settings
   # Sent by the client to change the recipe book settings.
   packet_recipe_book:
      bookId: varint
      bookOpen: bool
      filterActive: bool
   # MC: ServerboundRecipeBookSeenRecipePacket
   # wiki.vg: Set Seen Recipe
   # Sent by the client to set a recipe as seen.
   packet_displayed_recipe:
      recipeId: varint
   # MC: ServerboundRenameItemPacket
   # wiki.vg: Rename Item
   # Sent by the client to rename an item.
   packet_name_item:
      name: string
   # MC: ServerboundResourcePackPacket
   # wiki.vg: Resource Pack Response (play)
   # Sent by the client to respond to a resource pack request.
   packet_resource_pack_receive:
      uuid: UUID
      result: varint
   # MC: ServerboundSeenAdvancementsPacket
   # wiki.vg: Seen Advancements
   # Sent by the client to indicate that advancements have been seen.
   packet_advancement_tab:
      action: varint
      tabId: action ?
         if 0: string
         if 1: void
   # MC: ServerboundSelectTradePacket
   # wiki.vg: Select Trade
   # Sent by the client to select a trade.
   packet_select_trade:
      slot: varint
   # MC: ServerboundSetBeaconPacket
   # wiki.vg: Set Beacon Effect
   # Sent by the client to set the beacon effect.
   packet_set_beacon_effect:
      primary_effect?: varint
      secondary_effect?: varint
   # MC: ServerboundSetCarriedItemPacket
   # wiki.vg: Set Held Item (serverbound)
   # Sent by the client to set the held item.
   packet_held_item_slot:
      slotId: i16
   # MC: ServerboundSetCommandBlockPacket
   # wiki.vg: Program Command Block
   # Sent by the client to program a command block.
   packet_update_command_block:
      location: position
      command: string
      mode: varint
      flags: u8
   # MC: ServerboundSetCommandMinecartPacket
   # wiki.vg: Program Command Block Minecart
   # Sent by the client to program a command block minecart.
   packet_update_command_block_minecart:
      entityId: varint
      command: string
      track_output: bool
   # MC: ServerboundSetCreativeModeSlotPacket
   # wiki.vg: Set Creative Mode Slot
   # Sent by the client to set a creative mode slot.
   packet_set_creative_slot:
      slot: i16
      item: Slot
   # MC: ServerboundSetJigsawBlockPacket
   # wiki.vg: Program Jigsaw Block
   # Sent by the client to program a jigsaw block.
   packet_update_jigsaw_block:
      location: position
      name: string
      target: string
      pool: string
      finalState: string
      jointType: string
      selection_priority: varint
      placement_priority: varint
   # MC: ServerboundSetStructureBlockPacket
   # wiki.vg: Program Structure Block
   # Sent by the client to program a structure block.
   packet_update_structure_block:
      location: position
      action: varint
      mode: varint
      name: string
      offset_x: i8
      offset_y: i8
      offset_z: i8
      size_x: i8
      size_y: i8
      size_z: i8
      mirror: varint
      rotation: varint
      metadata: string
      integrity: f32
      seed: varint
      flags: u8
   # MC: ServerboundSignUpdatePacket
   # wiki.vg: Update Sign
   # Sent by the client to update a sign.
   packet_update_sign:
      location: position
      isFrontText: bool
      text1: string
      text2: string
      text3: string
      text4: string
   # MC: ServerboundSwingPacket
   # wiki.vg: Swing Arm
   # Sent by the client to swing the player's arm.
   packet_arm_animation:
      hand: varint
   # MC: ServerboundTeleportToEntityPacket
   # wiki.vg: Teleport To Entity
   # Sent by the client to teleport to an entity.
   packet_spectate:
      target: UUID
   # MC: ServerboundUseItemOnPacket
   # wiki.vg: Use Item On
   # Sent by the client to use an item on a block.
   packet_block_place:
      hand: varint
      location: position
      direction: varint
      cursorX: f32
      cursorY: f32
      cursorZ: f32
      insideBlock: bool
      worldBorderHit: bool
      sequence: varint
   # MC: ServerboundUseItemPacket
   # wiki.vg: Use Item
   # Sent by the client to use an item.
   packet_use_item:
      hand: varint
      sequence: varint
      rotation: vec2f

   packet:
      name: varint =>
      - teleport_confirm
      - query_block_nbt
      - select_bundle_item
      - set_difficulty
      - message_acknowledgement
      - chat_command
      - chat_command_signed
      - chat_message
      - chat_session_update
      - chunk_batch_received
      - client_command
      - tick_end
      - settings
      - tab_complete
      - configuration_acknowledged
      # Maybe rename enchant_item if it is used for other things too
      - enchant_item
      - window_click
      - close_window
      - set_slot_state
      - cookie_response
      - custom_payload
      - debug_sample_subscription
      - edit_book
      - query_entity_nbt
      - use_entity
      - generate_structure
      - keep_alive
      - lock_difficulty
      - position
      - position_look
      - look
      - flying
      - vehicle_move
      - steer_boat
      - pick_item_from_block
      - pick_item_from_entity
      - ping_request
      - craft_recipe_request
      - abilities
      - block_dig
      - entity_action
      - player_input
      - player_loaded
      - pong
      - recipe_book
      - displayed_recipe
      - name_item
      - resource_pack_receive
      - advancement_tab
      - select_trade
      - set_beacon_effect
      - held_item_slot
      - update_command_block
      - update_command_block_minecart
      - set_creative_slot
      - update_jigsaw_block
      - update_structure_block
      - update_sign
      - arm_animation
      - spectate
      - block_place
      - use_item
      params: name ?
         if teleport_confirm: packet_teleport_confirm
         if query_block_nbt: packet_query_block_nbt
         if select_bundle_item: packet_select_bundle_item
         if set_difficulty: packet_set_difficulty
         if message_acknowledgement: packet_message_acknowledgement
         if chat_command: packet_chat_command
         if chat_command_signed: packet_chat_command_signed
         if chat_message: packet_chat_message
         if chat_session_update: packet_chat_session_update
         if chunk_batch_received: packet_chunk_batch_received
         if client_command: packet_client_command
         if tick_end: packet_tick_end
         if settings: packet_settings
         if tab_complete: packet_tab_complete
         if configuration_acknowledged: packet_configuration_acknowledged
         if enchant_item: packet_enchant_item
         if window_click: packet_window_click
         if close_window: packet_close_window
         if set_slot_state: packet_set_slot_state
         if cookie_response: packet_common_cookie_response
         if custom_payload: packet_custom_payload
         if edit_book: packet_edit_book
         if query_entity_nbt: packet_query_entity_nbt
         if use_entity: packet_use_entity
         if generate_structure: packet_generate_structure
         if keep_alive: packet_keep_alive
         if lock_difficulty: packet_lock_difficulty
         if position: packet_position
         if position_look: packet_position_look
         if look: packet_look
         if flying: packet_flying
         if vehicle_move: packet_vehicle_move
         if steer_boat: packet_steer_boat
         if pick_item_from_block: packet_pick_item_from_block
         if pick_item_from_entity: packet_pick_item_from_entity
         if ping_request: packet_ping_request
         if craft_recipe_request: packet_craft_recipe_request
         if abilities: packet_abilities
         if block_dig: packet_block_dig
         if entity_action: packet_entity_action
         if player_input: packet_player_input
         if player_loaded: packet_player_loaded
         if pong: packet_pong
         if recipe_book: packet_recipe_book
         if displayed_recipe: packet_displayed_recipe
         if name_item: packet_name_item
         if resource_pack_receive: packet_resource_pack_receive
         if advancement_tab: packet_advancement_tab
         if select_trade: packet_select_trade
         if set_beacon_effect: packet_set_beacon_effect
         if held_item_slot: packet_held_item_slot
         if update_command_block: packet_update_command_block
         if update_command_block_minecart: packet_update_command_block_minecart
         if set_creative_slot: packet_set_creative_slot
         if update_jigsaw_block: packet_update_jigsaw_block
         if update_structure_block: packet_update_structure_block
         if update_sign: packet_update_sign
         if arm_animation: packet_arm_animation
         if spectate: packet_spectate
         if block_place: packet_block_place
         if use_item: packet_use_item

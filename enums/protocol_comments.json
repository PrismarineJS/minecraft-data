{
  "handshaking": {
    "toClient": {},
    "toServer": {
      "handshake": {
        "mainContent": [
          "",
          "This causes the server to switch into the target state.",
          "",
          ""
        ]
      },
      "legacy_server_list_ping": {
        "mainContent": [
          "",
          "While not technically part of the current protocol, legacy clients may send this packet to initiate [[Server List Ping]], and modern servers should handle it correctly.",
          "",
          "",
          "See [[Server List Ping#1.6]] for the details of the protocol that follows this packet.",
          ""
        ]
      }
    }
  },
  "status": {
    "toClient": {
      "response": {
        "mainContent": [
          "",
          ""
        ]
      },
      "pong": {
        "mainContent": [
          "",
          ""
        ]
      }
    },
    "toServer": {
      "request": {
        "mainContent": [
          "",
          ""
        ]
      },
      "ping": {
        "mainContent": [
          "",
          ""
        ]
      }
    }
  },
  "login": {
    "toClient": {
      "disconnect": {
        "mainContent": [
          "",
          ""
        ]
      },
      "encryption_request": {
        "mainContent": [
          "",
          "",
          "See [[Protocol Encryption]] for details.",
          ""
        ]
      },
      "login_success": {
        "mainContent": [
          "",
          "",
          "This packet switches the connection state to [[#Play|play]].",
          ""
        ]
      },
      "set_compression": {
        "mainContent": [
          "",
          ""
        ]
      }
    },
    "toServer": {
      "login_start": {
        "mainContent": [
          "",
          ""
        ]
      },
      "encryption_response": {
        "mainContent": [
          "",
          "",
          "See [[Protocol Encryption]] for details.",
          "",
          "[[Category:Protocol Details]]",
          "[[Category:Minecraft Modern]]"
        ]
      }
    }
  },
  "play": {
    "toClient": {
      "keep_alive": {
        "mainContent": [
          "",
          "The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same packet. If the client does not respond to them for over 30 seconds, the server kicks the client. Vice versa, if the server does not send any keep-alives for 20 seconds, the client will disconnect and yields a \"Timed out\" exception.",
          "",
          ""
        ]
      },
      "join_game": {
        "mainContent": [
          "",
          "See [[Protocol Encryption]] for information on logging in.",
          "",
          "",
          "{{Warning|If the Dimension isn't valid then the client will crash}}",
          ""
        ]
      },
      "chat_message": {
        "mainContent": [
          "",
          "Identifying the difference between Chat/System Message is important as it helps respect the user's chat visibility options. While Position 2 accepts json formatting it will not display, old style formatting works",
          "",
          "",
          "{{Warning|Malformed JSON will disconnect the client}}",
          ""
        ]
      },
      "time_update": {
        "mainContent": [
          "",
          "Time is based on ticks, where 20 ticks happen every second. There are 24000 ticks in a day, making Minecraft days exactly 20 minutes long.",
          "",
          "The time of day is based on the timestamp modulo 24000. 0 is sunrise, 6000 is noon, 12000 is sunset, and 18000 is midnight.",
          "",
          "The default SMP server increments the time by <code>20</code> every second.",
          "",
          ""
        ]
      },
      "entity_equipment": {
        "mainContent": [
          "",
          ""
        ]
      },
      "spawn_position": {
        "mainContent": [
          "",
          "Sent by the server after login to specify the coordinates of the spawn point (the point at which players spawn at, and which the compass points to). It can be sent at any time to update the point compasses point at.",
          "",
          ""
        ]
      },
      "update_health": {
        "mainContent": [
          "",
          "Sent by the server to update/set the health of the player it is sent to.",
          "",
          "Food {{Minecraft Wiki|Food#Hunger vs. Saturation|saturation}} acts as a food “overcharge”. Food values will not decrease while the saturation is over zero. Players logging in automatically get a saturation of 5.0. Eating food increases the saturation as well as the food bar.",
          "",
          ""
        ]
      },
      "respawn": {
        "mainContent": [
          "",
          "To change the player's dimension (overworld/nether/end), send them a respawn packet with the appropriate dimension, followed by prechunks/chunks for the new dimension, and finally a position and look packet. You do not need to unload chunks, the client will do it automatically.",
          "",
          "",
          "{{Warning|If the Dimension isn't valid then the client will crash}}",
          "",
          "{{Warning|Avoid changing player's dimension to same dimension they were already in, weird bugs can occur i.e. such player will be unable to attack other players in new world (fixes after their death and respawn)}}",
          ""
        ]
      },
      "player_position_and_look": {
        "mainContent": [
          "",
          "Updates the player's position on the server.",
          "",
          "If the distance between the last known position of the player on the server and the new position set by this packet is greater than 100 meters, the client will be kicked for “You moved too quickly :( (Hacking?)”.",
          "",
          "Also if the fixed-point number of X or Z is set greater than <code>3.2E7D</code> the client will be kicked for “Illegal position”.",
          "",
          "Yaw is measured in degrees, and does not follow classical trigonometry rules. The unit circle of yaw on the XZ-plane starts at (0, 1) and turns counterclockwise, with 90 at (-1, 0), 180 at (0, -1) and 270 at (1, 0). Additionally, yaw is not clamped to between 0 and 360 degrees; any number is valid, including negative numbers and numbers greater than 360.",
          "",
          "Pitch is measured in degrees, where 0 is looking straight ahead, -90 is looking straight up, and 90 is looking straight down.",
          "",
          "The yaw in degrees of a player standing at point (x0, z0) and looking towards point (x, z) can be calculated with:",
          "",
          " l = x-x0",
          " w = z-z0",
          " c = sqrt( l*l + w*w )",
          " alpha1 = -arcsin(l/c)/PI*180",
          " alpha2 =  arccos(w/c)/PI*180",
          " if alpha2 > 90 then",
          "     yaw = 180 - alpha1",
          " else",
          "     yaw = alpha1",
          "",
          "You can get a unit vector from a given yaw/pitch via:",
          "",
          " x = -cos(pitch) * sin(yaw)",
          " y = -sin(pitch)",
          " z =  cos(pitch) * cos(yaw)",
          "",
          "",
          "About the Flags field:",
          "",
          " <Dinnerbone> It's a bitfield, X/Y/Z/Y_ROT/X_ROT. If X is set, the x value is relative and not absolute.",
          "",
          ""
        ]
      },
      "held_item_change": {
        "mainContent": [
          "",
          "Sent to change the player's slot selection.",
          "",
          ""
        ]
      },
      "use_bed": {
        "mainContent": [
          "",
          "This packet tells that a player goes to bed.",
          "",
          "The client with the matching Entity ID will go into bed mode.",
          "",
          "This Packet is sent to all nearby players including the one sent to bed.",
          "",
          ""
        ]
      },
      "animation": {
        "mainContent": [
          "",
          "Sent whenever an entity should change animation.",
          "",
          "",
          "Animation can be one of the following values:",
          "",
          ""
        ]
      },
      "spawn_player": {
        "mainContent": [
          "",
          "This packet is sent by the server when a player comes into visible range, ''not'' when a player joins.",
          "",
          "This packet must be sent after the [[#Player List Item|Player List Item]] ([[#Play|Play]], 0x38, clientbound) packet that adds the player data for the client to use when spawning a player. If the tab list entry for the UUID included in this packet is not present when this packet arrives, the entity will not be spawned. The tab includes skin/cape data.",
          "",
          "Servers can, however, safely spawn player entities for players not in visible range. The client appears to handle it correctly.",
          "",
          "When in online-mode the UUIDs must be valid and have valid skin blobs, in offline-mode UUID v3 is used.",
          "",
          "For NPCs UUID v2 should be used. Note:",
          "",
          " <+Grum> i will never confirm this as a feature you know that :)",
          "",
          "In an example UUID, <code>xxxxxxxx-xxxx-Yxxx-xxxx-xxxxxxxxxxxx</code>, the UUID version is specified by <code>Y</code>. So, for UUID v3, <code>Y</code> will always be <code>3</code>, and for UUID v2, <code>Y</code> will always be <code>2</code>.",
          "",
          "",
          "{{Warning|A negative Current Item crashes clients}}",
          "",
          "{{Warning|The client will crash if no Metadata is sent}}",
          ""
        ]
      },
      "collect_item": {
        "mainContent": [
          "",
          "Sent by the server when someone picks up an item lying on the ground — its sole purpose appears to be the animation of the item flying towards you. It doesn't destroy the entity in the client memory, and it doesn't add it to your inventory. The server only checks for items to be picked up after each [[#Player Position|Player Position]] (and [[#Player Position And Look|Player Position And Look]]) packet sent by the client.",
          "",
          ""
        ]
      },
      "spawn_object": {
        "mainContent": [
          "",
          "Sent by the server when an Object/Vehicle is created.",
          "",
          ""
        ]
      },
      "spawn_mob": {
        "mainContent": [
          "",
          "Sent by the server when a Mob Entity is Spawned",
          "",
          ""
        ]
      },
      "spawn_painting": {
        "mainContent": [
          "",
          "This packet shows location, name, and type of painting.",
          "",
          "Calculating the center of an image: given a (width x height) grid of cells, with (0, 0) being the top left corner, the center is (max(0, width / 2 - 1), height / 2). E.g.",
          "",
          " 2x1 (1, 0)",
          " 4x4 (1, 2)",
          "",
          ""
        ]
      },
      "spawn_experience_orb": {
        "mainContent": [
          "",
          "Spawns one or more experience orbs.",
          "",
          ""
        ]
      },
      "entity_velocity": {
        "mainContent": [
          "",
          "Velocity is believed to be in units of 1/8000 of a block per server tick (50ms); for example, -1343 would move (-1343 / 8000) = −0.167875 blocks per tick (or −3,3575 blocks per second).",
          "",
          ""
        ]
      },
      "destroy_entities": {
        "mainContent": [
          "",
          "Sent by the server when a list of entities is to be destroyed on the client.",
          "",
          ""
        ]
      },
      "entity": {
        "mainContent": [
          "",
          "This packet may be used to initialize an entity.",
          "",
          "For player entities, either this packet or any move/look packet is sent every game tick. So the meaning of this packet is basically that the entity did not move/look since the last such packet.",
          "",
          ""
        ]
      },
      "entity_relative_move": {
        "mainContent": [
          "",
          "This packet is sent by the server when an entity moves less then 4 blocks; if an entity moves more than 4 blocks [[#Entity Teleport|Entity Teleport]] should be sent instead.",
          "",
          "This packet allows at most four blocks movement in any direction, because byte range is from -128 to 127.",
          "",
          ""
        ]
      },
      "entity_look": {
        "mainContent": [
          "",
          "This packet is sent by the server when an entity rotates.",
          "",
          ""
        ]
      },
      "entity_look_and_relative_move": {
        "mainContent": [
          "",
          "This packet is sent by the server when an entity rotates and moves. Since a byte range is limited from -128 to 127, and movement is offset of fixed-point numbers, this packet allows at most four blocks movement in any direction. (-128/32 == -4)",
          "",
          ""
        ]
      },
      "entity_teleport": {
        "mainContent": [
          "",
          "This packet is sent by the server when an entity moves more than 4 blocks.",
          "",
          ""
        ]
      },
      "entity_head_look": {
        "mainContent": [
          "",
          "Changes the direction an entity's head is facing.",
          "",
          ""
        ]
      },
      "entity_status": {
        "mainContent": [
          "",
          "",
          ""
        ]
      },
      "attach_entity": {
        "mainContent": [
          "",
          "This packet is sent when a player has been attached to an entity (e.g. Minecart).",
          "",
          ""
        ]
      },
      "entity_metadata": {
        "mainContent": [
          "",
          ""
        ]
      },
      "entity_effect": {
        "mainContent": [
          "",
          ""
        ]
      },
      "remove_entity_effect": {
        "mainContent": [
          "",
          ""
        ]
      },
      "set_experience": {
        "mainContent": [
          "",
          "Sent by the server when the client should change experience levels.",
          "",
          ""
        ]
      },
      "entity_properties": {
        "mainContent": [
          "",
          "",
          "Known Key values:",
          "",
          "",
          "''Modifier Data'' structure:",
          "",
          ""
        ]
      },
      "chunk_data": {
        "mainContent": [
          "",
          "Chunks are not unloaded by the client automatically. To unload chunks, send this packet with Ground-Up Continuous=true and no 16^3 chunks (eg. Primary Bit Mask=0). The server does not send skylight information for nether-chunks, it's up to the client to know if the player is currently in the nether. You can also infer this information from the primary bitmask and the amount of uncompressed bytes sent.",
          "",
          "See also: [[SMP Map Format]]",
          "",
          "Changes in 1.8:",
          "",
          "* Data value section removed",
          "* Extended id section removed",
          "* Block id section is now a unsigned short (little endian) per a block",
          "* The block id is equal to <code>(id << 4) | data</code>",
          "",
          ""
        ]
      },
      "multi_block_change": {
        "mainContent": [
          "Fired whenever 2 or more blocks are changed within the render distance.",
          ""
        ]
      },
      "block_change": {
        "mainContent": [
          "Fired whenever a block is changed within the render distance.",
          ""
        ]
      },
      "block_action": {
        "mainContent": [
          "",
          "This packet is used for a number of things:",
          "",
          "* Chests opening and closing",
          "* Pistons pushing and pulling",
          "* Note blocks playing",
          "* Updating beacons",
          "",
          "See Also: [[Block Actions]] ",
          "",
          ""
        ]
      },
      "block_break_animation": {
        "mainContent": [
          "",
          "0–9 are the displayable destroy stages and each other number means that there is no animation on this coordinate.",
          "",
          "You can also set an animation to air! The animation will still be visible.",
          "",
          "If you need to display several break animations at the same time you have to give each of them a unique Entity ID.",
          "",
          "Also if you set the coordinates to a special block like water etc. it won't show the actual break animation but some other interesting effects. (Water will lose it's transparency)",
          "",
          ""
        ]
      },
      "map_chunk_bulk": {
        "mainContent": [
          "",
          "1.8 changes at [[#Chunk Data|Chunk Data]]",
          "",
          "To reduce the number of bytes, this packet is used to send chunks together for better compression results.",
          "",
          ""
        ]
      },
      "explosion": {
        "mainContent": [
          "",
          "Sent when an explosion occurs (creepers, TNT, and ghast fireballs).",
          "",
          "Each block in Records is set to air. Coordinates for each axis in record is int(X) + record.x",
          "",
          ""
        ]
      },
      "effect": {
        "mainContent": [
          "",
          "Sent when a client is to play a sound or particle effect.",
          "",
          "By default, the Minecraft client adjusts the volume of sound effects based on distance. The final boolean field is used to disable this, and instead the effect is played from 2 blocks away in the correct direction. Currently this is only used for effect 1013 (mob.wither.spawn), and is ignored for any other value by the client.",
          "",
          "",
          "Effect IDs:",
          "",
          "",
          "Smoke directions:",
          "",
          ""
        ]
      },
      "sound_effect": {
        "mainContent": [
          "",
          "Used to play a sound effect on the client.",
          "",
          "Custom sounds may be added by resource packs.",
          "",
          ""
        ]
      },
      "particle": {
        "mainContent": [
          "",
          "Displays the named particle",
          "",
          "",
          "Particle IDs:",
          "",
          ""
        ]
      },
      "change_game_state": {
        "mainContent": [
          "",
          "It appears when a bed can't be used as a spawn point and when the rain state changes.",
          "",
          "",
          "''Reason codes'':",
          "",
          ""
        ]
      },
      "spawn_global_entity": {
        "mainContent": [
          "",
          "With this packet, the server notifies the client of thunderbolts striking within a 512 block radius around the player. The coordinates specify where exactly the thunderbolt strikes.",
          "",
          ""
        ]
      },
      "open_window": {
        "mainContent": [
          "",
          "This is sent to the client when it should open an inventory, such as a chest, workbench, or furnace. This message is not sent anywhere for clients opening their own inventory.",
          "",
          "",
          "See [[Inventory#Windows|inventory windows]] for further information.",
          ""
        ]
      },
      "close_window": {
        "mainContent": [
          "",
          "This packet is sent from the server to the client when a window is forcibly closed, such as when a chest is destroyed while it's open.",
          "",
          "Note, notchian clients send a close window packet with Window ID 0 to close their inventory even though there is never an [[#Open Window|Open Window]] packet for inventory. ",
          "",
          ""
        ]
      },
      "set_slot": {
        "mainContent": [
          "",
          "Sent by the server when an item in a slot (in a window) is added/removed.",
          "",
          ""
        ]
      },
      "window_items": {
        "mainContent": [
          "",
          "[[File:Inventory-slots.png|thumb|The inventory slots]]",
          "",
          "Sent by the server when items in multiple slots (in a window) are added/removed. This includes the main inventory, equipped armour and crafting slots.",
          "",
          "",
          "See [[Inventory#Windows|inventory windows]] for further information about how slots are indexed.",
          ""
        ]
      },
      "window_property": {
        "mainContent": [
          "",
          "This packet is used to inform the client that part of a GUI window should be updated.",
          "",
          "",
          "The meaning of the Property field depends on the type of the window. The following table shows the known combinations of window type and property, and how the value is to be interpreted.",
          "",
          ""
        ]
      },
      "confirm_transaction": {
        "mainContent": [
          "",
          "A packet from the server indicating whether a request from the client was accepted, or whether there was a conflict (due to lag).",
          "",
          ""
        ]
      },
      "update_sign": {
        "mainContent": [
          "",
          "This message is sent from the server to the client whenever a sign is discovered or created. This message is NOT sent when a sign is destroyed or unloaded.",
          "",
          ""
        ]
      },
      "maps": {
        "mainContent": [
          "",
          "Updates a rectangular area on a map.",
          "",
          ""
        ]
      },
      "update_block_entity": {
        "mainContent": [
          "",
          "Essentially a block update on a block entity.",
          "",
          "",
          "''Action'' field:",
          "",
          "* '''1''': Set SpawnPotentials of a mob spawner",
          "* '''2''': Set command block text (command and last execution status)",
          "* '''3''': Set the level, primary, and secondary powers of a beacon",
          "* '''4''': Set rotation and skin of mob head",
          "* '''5''': Set type of flower in flower pot",
          "* '''6''': Set base color and patterns on a banner",
          ""
        ]
      },
      "sign_editor_open": {
        "mainContent": [
          "",
          "Sent on placement of sign.",
          "",
          ""
        ]
      },
      "statistics": {
        "mainContent": [
          "",
          ""
        ]
      },
      "player_list_item": {
        "mainContent": [
          "",
          "Sent by the notchian server to update the user list (<tab> in the client).",
          "",
          ""
        ]
      },
      "player_abilities": {
        "mainContent": [
          "",
          "The latter 2 floats are used to indicate the walking and flying speeds respectively, while the first byte is used to determine the value of 4 booleans.",
          "",
          "The flags are whether damage is disabled (god mode, 8, bit 3), whether the player can fly (4, bit 2), whether the player is flying (2, bit 1), and whether the player is in creative mode (1, bit 0).",
          "",
          "To get the values of these booleans, simply AND (&) the byte with 1,2,4 and 8 respectively, to get the 0 or 1 bitwise value. To set them OR (|) them with their repspective masks.",
          "",
          ""
        ]
      },
      "tab-complete": {
        "mainContent": [
          "",
          "The server responds with a list of auto-completions of the last word sent to it. In the case of regular chat, this is a player username. Command names and parameters are also supported.",
          "",
          ""
        ]
      },
      "scoreboard_objective": {
        "mainContent": [
          "",
          "This is sent to the client when it should create a new {{Minecraft Wiki|scoreboard}} objective or remove one.",
          "",
          ""
        ]
      },
      "update_score": {
        "mainContent": [
          "",
          "This is sent to the client when it should update a scoreboard item. ",
          "",
          ""
        ]
      },
      "display_scoreboard": {
        "mainContent": [
          "",
          "This is sent to the client when it should display a scoreboard.",
          "",
          ""
        ]
      },
      "teams": {
        "mainContent": [
          "",
          "Creates and updates teams.",
          "",
          ""
        ]
      },
      "plugin_message": {
        "mainContent": [
          "",
          "Mods and plugins can use this to send their data. Minecraft itself uses a number of [[plugin channel]]s. These internal channels are prefixed with <code>MC|</code>.",
          "",
          "More documentation on this: [http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/ http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/]",
          "",
          ""
        ]
      },
      "disconnect": {
        "mainContent": [
          "",
          "Sent by the server before it disconnects a client. The server assumes that the sender has already closed the connection by the time the packet arrives.",
          "",
          ""
        ]
      },
      "server_difficulty": {
        "mainContent": [
          "",
          "Changes the difficulty setting in the client's option menu",
          "",
          ""
        ]
      },
      "combat_event": {
        "mainContent": [
          "",
          ""
        ]
      },
      "camera": {
        "mainContent": [
          "",
          ""
        ]
      },
      "world_border": {
        "mainContent": [
          "",
          ""
        ]
      },
      "title": {
        "mainContent": [
          "",
          "",
          "“Hide” makes the title disappear, but if you run times again the same title will appear. “Reset” erases the text.",
          ""
        ]
      },
      "set_compression": {
        "mainContent": [
          "",
          ""
        ]
      },
      "player_list_header/footer": {
        "mainContent": [
          "",
          ""
        ]
      },
      "resource_pack_send": {
        "mainContent": [
          "",
          ""
        ]
      },
      "update_entity_nbt": {
        "mainContent": [
          "",
          ""
        ]
      }
    },
    "toServer": {
      "keep_alive": {
        "mainContent": [
          "",
          "The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same packet.",
          "",
          ""
        ]
      },
      "chat_message": {
        "mainContent": [
          "",
          "The default server will check the message to see if it begins with a '/'. If it doesn't, the username of the sender is prepended and sent to all other clients (including the original sender). If it does, the server assumes it to be a command and attempts to process it. A message longer than 100 characters will cause the server to kick the client. This change was initially done by allowing the client to not slice the message up to 119 (the previous limit), without changes to the server. For this reason, the vanilla server kept the code to cut messages at 119, but this isn't a protocol limitation and can be ignored.",
          "",
          ""
        ]
      },
      "use_entity": {
        "mainContent": [
          "",
          "This packet is sent from the client to the server when the client attacks or right-clicks another entity (a player, minecart, etc).",
          "",
          "A Notchian server only accepts this packet if the entity being attacked/used is visible without obstruction and within a 4-unit radius of the player's position.",
          "",
          "Note that middle-click in creative mode is interpreted by the client and sent as a [[#Creative Inventory Action|Creative Inventory Action]] packet instead.",
          "",
          ""
        ]
      },
      "player": {
        "mainContent": [
          "",
          "This packet is used to indicate whether the player is on ground (walking/swimming), or airborne (jumping/falling).",
          "",
          "When dropping from sufficient height, fall damage is applied when this state goes from false to true. The amount of damage applied is based on the point where it last changed from true to false. Note that there are several movement related packets containing this state.",
          "",
          ""
        ]
      },
      "player_position": {
        "mainContent": [
          "",
          "Updates the player's XYZ position on the server.",
          "",
          "If the distance between the last known position of the player on the server and the new position set by this packet is greater than 100 units, this will result in the client being kicked for “You moved too quickly :( (Hacking?)”",
          "",
          "If the distance is greater than 10 units, the server will log the warning message \"<name> moved too quickly!\", followed by two coordinate triples (maybe movement delta?), but will not kick the client.",
          "",
          "Also if the fixed-point number of X or Z is set greater than 3.2×10<sup>7</sup> the client will be kicked for “Illegal position”.",
          "",
          ""
        ]
      },
      "player_look": {
        "mainContent": [
          "[[File:Minecraft-trig-yaw.png|thumb|The unit circle for yaw]]",
          "[[File:Yaw.png|thumb|The unit circle of yaw, redrawn]]",
          "",
          "Updates the direction the player is looking in.",
          "",
          "Yaw is measured in degrees, and does not follow classical trigonometry rules. The unit circle of yaw on the XZ-plane starts at (0, 1) and turns counterclockwise, with 90 at (-1, 0), 180 at (0,-1) and 270 at (1, 0). Additionally, yaw is not clamped to between 0 and 360 degrees; any number is valid, including negative numbers and numbers greater than 360.",
          "",
          "Pitch is measured in degrees, where 0 is looking straight ahead, -90 is looking straight up, and 90 is looking straight down.",
          "",
          "The yaw of player (in degrees), standing at point (x0, z0) and looking towards point (x, z) one can be calculated with:",
          "",
          " l = x-x0",
          " w = z-z0",
          " c = sqrt( l*l + w*w )",
          " alpha1 = -arcsin(l/c)/PI*180",
          " alpha2 =  arccos(w/c)/PI*180",
          " if alpha2 > 90 then",
          "     yaw = 180 - alpha1",
          " else",
          "     yaw = alpha1",
          "",
          "You can get a unit vector from a given yaw/pitch via:",
          "",
          " x = -cos(pitch) * sin(yaw)",
          " y = -sin(pitch)",
          " z =  cos(pitch) * cos(yaw)",
          "",
          ""
        ]
      },
      "player_position_and_look": {
        "mainContent": [
          "",
          "A combination of [[#Player Look|Player Look]] and [[#Player Position|Player Position]].",
          "",
          ""
        ]
      },
      "player_digging": {
        "mainContent": [
          "",
          "Sent when the player mines a block. A Notchian server only accepts digging packets with coordinates within a 6-unit radius of the player's position.",
          "",
          "",
          "Status can (currently) be one of six values:",
          "",
          "",
          "Notchian clients send a 0 (started digging) when they start digging and a 2 (finished digging) once they think they are finished. If digging is aborted, the client simply send a 1 (cancel digging).",
          "",
          "Status code 4 (drop item) is a special case. In-game, when you use the Drop Item command (keypress 'q'), a dig packet with a status of 4, and all other values set to 0, is sent from client to server. Status code 3 is similar, but drops the entire stack.",
          "",
          "Status code 5 (shoot arrow / finish eating) is also a special case. The x, y and z fields are all set to 0 like above, with the exception of the face field, which is set to 255.",
          "",
          "The face can be one of six values, representing the face being hit:",
          "",
          ""
        ]
      },
      "player_block_placement": {
        "mainContent": [
          "",
          "",
          "In normal operation (i.e. placing a block), this packet is sent once, with the values set normally.",
          "",
          "This packet has a special case where X, Y, Z, and Face are all -1. (Note that Y is unsigned so set to 255.) This special packet indicates that the currently held item for the player should have its state updated such as eating food, pulling back bows, using buckets, etc.",
          "",
          "In a Notchian Beta client, the block or item ID corresponds to whatever the client is currently holding, and the client sends one of these packets any time a right-click is issued on a surface, so no assumptions can be made about the safety of the ID. However, with the implementation of server-side inventory, a Notchian server seems to ignore the item ID, instead operating on server-side inventory information and holding selection. The client has been observed (1.2.5 and 1.3.2) to send both real item IDs and -1 in a single session.",
          "",
          "Special note on using buckets: When using buckets, the Notchian client might send two packets: first a normal and then a special case. The first normal packet is sent when you're looking at a block (e.g. the water you want to scoop up). This normal packet does not appear to do anything with a Notchian server. The second, special case packet appears to perform the action — based on current position/orientation and with a distance check — it appears that buckets can only be used within a radius of 6 units.",
          ""
        ]
      },
      "held_item_change": {
        "mainContent": [
          "",
          "Sent when the player changes the slot selection",
          "",
          ""
        ]
      },
      "animation": {
        "mainContent": [
          "",
          "Sent when the player's arm swings",
          "",
          ""
        ]
      },
      "entity_action": {
        "mainContent": [
          "",
          "Sent at least when crouching, leaving a bed, or sprinting. To send action animation to client use 0x28. The client will send this with Action ID = 3 when “Leave Bed” is clicked.",
          "",
          "",
          "Action ID can be one of the following values:",
          "",
          ""
        ]
      },
      "steer_vehicle": {
        "mainContent": [
          "",
          ""
        ]
      },
      "close_window": {
        "mainContent": [
          "",
          "This packet is sent by the client when closing a window.",
          "",
          "Note, Notchian clients send a close window message with Window ID 0 to close their inventory even though there is never an Open Window message for inventory.",
          "",
          ""
        ]
      },
      "click_window": {
        "mainContent": [
          "",
          "This packet is sent by the player when it clicks on a slot in a window.",
          "",
          "",
          "See [[Inventory#Windows|inventory windows]] for further information about how slots are indexed.",
          "",
          "When right-clicking on a stack of items, half the stack will be picked up and half left in the slot. If the stack is an odd number, the half left in the slot will be smaller of the amounts.",
          "",
          "The distinct type of click performed by the client is determined by the combination of the Mode and Button fields.",
          "",
          "",
          "Starting from version 1.5, “painting mode” is available for use in inventory windows. It is done by picking up stack of something (more than 1 item), then holding mouse button (left, right or middle) and dragging held stack over empty (or same type in case of right button) slots. In that case client sends the following to server after mouse button release (omitting first pickup packet which is sent as usual):",
          "",
          "# packet with mode 5, slot -999, button (0 for left | 4 for right);",
          "# packet for every slot painted on, mode is still 5, button (1 | 5);",
          "# packet with mode 5, slot -999, button (2 | 6);",
          "",
          "If any of the painting packets other than the “progress” ones are sent out of order (for example, a start, some slots, then another start; or a left-click in the middle) the painting status will be reset.",
          "",
          "The server will send back a [[#Confirm Transaction_2|Confirm Transaction]] packet. If the click was not accepted, the client must reflect that packet before sending more [[#Click Window|Click Window]] packets, otherwise the server will reject them silently. The Notchian server also sends a [[#Window Items|Window Items]] packet for the open window and [[#Set Slot|Set Slot]] packets for the clicked and cursor slot, but only when the click was not accepted, probably to resynchronize client and server.",
          ""
        ]
      },
      "confirm_transaction": {
        "mainContent": [
          "",
          " <SpaceManiac> noooo idea why the serverbound confirm transaction packet exists",
          " <SpaceManiac> I think it's sent as a response to the clientbound confirm transaction in some situations, but it's fuzzy",
          "",
          ""
        ]
      },
      "creative_inventory_action": {
        "mainContent": [
          "",
          "While the user is in the standard inventory (i.e., not a crafting bench) in Creative mode, the player will send this packet.",
          "",
          "Clicking in the creative inventory menu is quite different from non-creative inventory management. Picking up an item with the mouse actually deletes the item from the server, and placing an item into a slot or dropping it out of the inventory actually tells the server to create the item from scratch. (This can be verified by clicking an item that you don't mind deleting, then severing the connection to the server; the item will be nowhere to be found when you log back in.) As a result of this implementation strategy, the \"Destroy Item\" slot is just a client-side implementation detail that means \"I don't intend to recreate this item.\". Additionally, the long listings of items (by category, etc.) are a client-side interface for choosing which item to create. Picking up an item from such listings sends no packets to the server; only when you put it somewhere does it tell the server to create the item in that location.",
          "",
          "This action can be described as \"set inventory slot\". Picking up an item sets the slot to item ID -1. Placing an item into an inventory slot sets the slot to the specified item. Dropping an item (by clicking outside the window) effectively sets slot -1 to the specified item, which causes the server to spawn the item entity, etc.. All other inventory slots are numbered the same as the non-creative inventory (including slots for the 2x2 crafting menu, even though they aren't visible in the vanilla client).",
          "",
          ""
        ]
      },
      "enchant_item": {
        "mainContent": [
          "",
          ""
        ]
      },
      "update_sign": {
        "mainContent": [
          "",
          "This message is sent from the client to the server when the “Done” button is pushed after placing a sign.",
          "",
          ""
        ]
      },
      "player_abilities": {
        "mainContent": [
          "",
          "The latter 2 bytes are used to indicate the walking and flying speeds respectively, while the first byte is used to determine the value of 4 booleans.",
          "",
          "The vanilla client sends this packet when the player starts/stops flying with the second parameter changed accordingly. All other parameters are ignored by the vanilla server.",
          "",
          ""
        ]
      },
      "tab-complete": {
        "mainContent": [
          "",
          "Sent when the user presses ''tab'' while writing text.",
          "",
          ""
        ]
      },
      "client_settings": {
        "mainContent": [
          "",
          "Sent when the player connects, or when settings are changed.",
          "",
          "",
          "''Displayed Skin Parts'' flags:",
          "",
          "* Bit 0 (0x01): Cape enabled",
          "* Bit 1 (0x02): Jacket enabled",
          "* Bit 2 (0x04): Left Sleeve enabled",
          "* Bit 3 (0x08): Right Sleeve enabled",
          "* Bit 4 (0x10): Left Pants Leg enabled",
          "* Bit 5 (0x20): Right Pants Leg enabled",
          "* Bit 6 (0x40): Hat enabled",
          "",
          "The most significant bit (bit 7, 0x80) appears to be unused.",
          ""
        ]
      },
      "client_status": {
        "mainContent": [
          "",
          "Sent when the client is ready to complete login and when the client is ready to respawn after death.",
          "",
          "",
          "''Action ID'' values:",
          "",
          ""
        ]
      },
      "plugin_message": {
        "mainContent": [
          "",
          "Mods and plugins can use this to send their data. Minecraft itself uses a number of [[plugin channel]]s. These internal channels are prefixed with <code>MC|</code>.",
          "",
          "More documentation on this: [http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/ http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/]",
          "",
          "Note that the data length is known from the packet length, so there is no need for a length member being sent.",
          "",
          ""
        ]
      },
      "spectate": {
        "mainContent": [
          "",
          ""
        ]
      },
      "resource_pack_status": {
        "mainContent": [
          "",
          ""
        ]
      }
    }
  }
}